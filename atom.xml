<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zzh的博客 | Alvin103</title>
  
  <subtitle>Hello world, heal the world.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://alvin103.github.io/"/>
  <updated>2020-02-17T19:25:08.044Z</updated>
  <id>http://alvin103.github.io/</id>
  
  <author>
    <name>郑子豪</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>共享单车小程序开发总结</title>
    <link href="http://alvin103.github.io/2020/02/16/%E5%85%B1%E4%BA%AB%E5%8D%95%E8%BD%A6%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    <id>http://alvin103.github.io/2020/02/16/%E5%85%B1%E4%BA%AB%E5%8D%95%E8%BD%A6%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</id>
    <published>2020-02-16T10:45:54.000Z</published>
    <updated>2020-02-17T19:25:08.044Z</updated>
    
    <content type="html"><![CDATA[<hr><p>今天看网课学到一句名言，感慨一下……  </p><p>The mind is not a vessel to be filled, but a fire to be kindled.&emsp;&emsp;—— Plutarch  </p><p>说得真好，确实是这样，所有坚持的事情，那些个日日夜夜，并不是在乎“容器”里的得失，而是因为有了心中的那团火焰。</p><a id="more"></a><hr><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><h3 id="初始界面，定位"><a href="#初始界面，定位" class="headerlink" title="初始界面，定位"></a>初始界面，定位</h3><p><img src="https://i1.fuimg.com/709842/b41e8bf4a6ef20ec.gif" alt="Markdown"></p><h3 id="点击扫码开锁，进入注册"><a href="#点击扫码开锁，进入注册" class="headerlink" title="点击扫码开锁，进入注册"></a>点击扫码开锁，进入注册</h3><p><img src="https://i1.fuimg.com/709842/e1038fe98bd2175d.gif" alt="Markdown"></p><h3 id="押金和实名认证"><a href="#押金和实名认证" class="headerlink" title="押金和实名认证"></a>押金和实名认证</h3><p><img src="https://i1.fuimg.com/709842/fa4774da01d101ef.gif" alt="Markdown"></p><h3 id="查找附近单车和添加单车"><a href="#查找附近单车和添加单车" class="headerlink" title="查找附近单车和添加单车"></a>查找附近单车和添加单车</h3><p><img src="https://i1.fuimg.com/709842/99bcec7f6a8aa7d1.gif" alt="Markdown"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第一次做微信小程序，牛客网的项目，跟着做下来学习了一些知识，要完全消化理解还需要继续学习，过程中遇到问题卡住，孤独的查文档和博客的景象历历在目 T_T </p><p>总结一下，项目主要进行了<br>1.小程序相关组件实现前台界面<br>2.SpringBoot框架写后台程序，初识SpringBoot，真的是开箱即用了-_-<br>3.短信接口用了腾讯云的<br>4.redis用来存储检验验证码<br>5.MongoDB数据库保存users和bikes的信息<br>6.支付和实名的两个request都是模拟的，只是保存了信息没有调用真正的API<br>7.MongoDB的Geo索引实现只查找一定范围内的单车 </p><p>一些图标从<a href="https://www.iconfont.cn/home/index?spm=a313x.7781069.1998910419.2" target="_blank" rel="noopener">iconfont</a>找的<br>源码已上传<a href="https://github.com/Alvin103/bike" target="_blank" rel="noopener">github</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;今天看网课学到一句名言，感慨一下……  &lt;/p&gt;
&lt;p&gt;The mind is not a vessel to be filled, but a fire to be kindled.&amp;emsp;&amp;emsp;—— Plutarch  &lt;/p&gt;
&lt;p&gt;说得真好，确实是这样，所有坚持的事情，那些个日日夜夜，并不是在乎“容器”里的得失，而是因为有了心中的那团火焰。&lt;/p&gt;
    
    </summary>
    
    
      <category term="小程序" scheme="http://alvin103.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>腾讯云短信接口实现手机验证码</title>
    <link href="http://alvin103.github.io/2020/02/15/%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>http://alvin103.github.io/2020/02/15/%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81/</id>
    <published>2020-02-14T17:31:04.000Z</published>
    <updated>2020-02-14T23:48:25.022Z</updated>
    
    <content type="html"><![CDATA[<p>终于用腾讯云短信接口实现了短信注册码！ 一路摸索，好在柳暗花明，遇到的问题最终都解决了。  </p><p><img src="/2020/02/15/%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81/1.JPG" alt="1"></p><a id="more"></a><hr><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="腾讯云短信"><a href="#腾讯云短信" class="headerlink" title="腾讯云短信"></a>腾讯云短信</h3><p>注册腾讯云账号使用短信服务，相信很多跟我一样都卡在了申请短信签名这里<br><img src="/2020/02/15/%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81/2.JPG" alt="1"><br>没有符合的申请要求，没有上线的小程序和公众号^_^,几乎放弃，想再找找其他免费的短信服务。<br>灵机一动，想到了之前做个人公众号的舍友 BigSakana。</p><p>于是愉快的申请好了签名和正文，之后就可以行动了！<br><img src="/2020/02/15/%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81/4.JPG" alt="1"></p><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>Redis是一个开源的用C编写的高性能key-value数据库!<br><a href="https://github.com/microsoftarchive/redis/releases" target="_blank" rel="noopener">github下载（需梯子）</a>&emsp;&emsp;&emsp;&emsp;<a href="https://pan.baidu.com/s/1i56thcD?fid=736886225509949" target="_blank" rel="noopener">百度云下载</a><br>下好后添加环境变量 控制台输入启动Redis  </p><pre><code>redis-cli.exe   //启动set test 111    //添加key名为test 键值为111的数据keys *          //查看所有get test        //找key对应valuedel test        //删除</code></pre><p><img src="/2020/02/15/%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81/5.JPG" alt="1"><br>还可以设置超时时间等</p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">&lt;!-- 腾讯云短信依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.qcloudsms<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>qcloudsms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Redis 依赖 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="发送短信"><a href="#发送短信" class="headerlink" title="发送短信"></a>发送短信</h2><p><img src="/2020/02/15/%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81/6.JPG" alt="1"><br>流程:<br>当用户输入手机号点击获取验证码，小程序向后台发送请求，后台向提供短信服务的运营商发出请求，然后短信运营商给手机用户发送短信。后台会把手机号和验证码存到Redis中，并设置超时时间。</p><p>后端用的java</p><p><img src="/2020/02/15/%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81/7.JPG" alt="1"></p><h3 id="用户类代码"><a href="#用户类代码" class="headerlink" title="用户类代码"></a>用户类代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.alvin.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.alvin.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span><span class="comment">//标记Controller 用于处理用户请求和响应 Spring管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"><span class="comment">//接收用户请求的参数并且将相应的数据响应给用户</span></span><br><span class="line"><span class="meta">@Autowired</span><span class="comment">//按类型注入</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;<span class="comment">//引用接口</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user/genCode"</span>)<span class="comment">//与小程序的请求一致</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">genVerifyCode</span><span class="params">(String nationCode, String phoneNum)</span> </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> flag = userService.sendMsg(nationCode, phoneNum);<span class="comment">//sendMsg方法传递用户输入的国家编码和电话号码</span></span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="service类代码"><a href="#service类代码" class="headerlink" title="service类代码"></a>service类代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.alvin.service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit; </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.qcloudsms.SmsSingleSender; </span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span><span class="comment">//Spring注解 标记这个类被Spring容器管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMsg</span><span class="params">(String nationCode, String phoneNum)</span> </span>&#123;    <span class="comment">//方法的实现</span></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// 调用腾讯云的短信API</span></span><br><span class="line"><span class="keyword">int</span> appid = Integer.parseInt(stringRedisTemplate.opsForValue().get(<span class="string">"appid"</span>));</span><br><span class="line">String appkey = stringRedisTemplate.opsForValue().get(<span class="string">"appkey"</span>);</span><br><span class="line"><span class="comment">//生成一个随机数字（4位）</span></span><br><span class="line">String code = (<span class="keyword">int</span>)(Math.random() * <span class="number">9</span> + <span class="number">1</span>) * <span class="number">1000</span> - <span class="number">1</span> + <span class="string">""</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//String[] params = &#123;"5678"&#125;;</span></span><br><span class="line"><span class="comment">//String code = "5678";</span></span><br><span class="line">SmsSingleSender ssender = <span class="keyword">new</span> SmsSingleSender(appid, appkey);</span><br><span class="line"><span class="comment">//向对应手机号的用户发送短信</span></span><br><span class="line">        ssender.send(<span class="number">0</span>, nationCode, phoneNum, <span class="string">"【BigSakana】您的注册验证码为"</span>+code, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line"><span class="comment">//将发送的手机号作为key，验证码作为value保存到Redis中</span></span><br><span class="line">stringRedisTemplate.opsForValue().set(phoneNum, code, <span class="number">300</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;<span class="comment">//异常</span></span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置redis"><a href="#配置redis" class="headerlink" title="配置redis"></a>配置redis</h3><p>配置文件中填写Redis的链接信息</p><pre><code>#redisspring.redis.host=localhostspring.redis.port=6379spring.redis.pool.max-active=20spring.redis.pool.max-idle=10spring.redis.pool.min-idle=5spring.redis.pool.max-wait=-1</code></pre><p>已在Redis里添加了appid和appkey (腾讯云短信服务的应用)<br><img src="/2020/02/15/%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81/8.JPG" alt="1">  </p><p>之后启动，测试，成功，取得阶段性胜利^_^！<br><img src="/2020/02/15/%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81/12.JPG" alt="1">  </p><hr><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/2020/02/15/%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81/9.JPG" alt="1"><br>可以看到，开始测试了很多回没有成功，调试过程中小程序确实显示向后端发出了请求，后端也没有异常，很是为啥就是发不出短信呢，查看腾讯云的业务统计知道了是签名的原因。既然审批通过了肯定是格式的问题，不过知道了也不清楚怎么办，于是看开发指南开始试！  </p><p> （后来知道其实发不出的原因就是没把签名写到发送内容里）</p><p>刚开始我用的是 ssender.send 方法，五个参数类型都是String 。 </p><pre><code>ssender.send(0, nationCode, phoneNum, &quot;您的注册验证码为&quot;+code, &quot;&quot;, &quot;&quot;);</code></pre><p><img src="/2020/02/15/%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81/10.JPG" alt="1"> </p><p>后来换成文档实例的 ssender.sendWithParam 方法。</p><pre><code>ssender.sendWithParam(nationCode, phoneNum,templateId, params, smsSign, &quot;&quot;, &quot;&quot;);//templateId 正文模板id//params     参数//smsSign    签名</code></pre><p><img src="/2020/02/15/%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81/11.JPG" alt="1"><br>注意这个方法的第三个参数类型是ArrayList&lt; String &gt; ，之前声明的是String类型，需要修改下。</p><p>sendWithParam()方法把签名作为一个参数，发送成功了。于是换回send()，这次加上了签名在内容里，也成功了！</p><pre><code>ssender.send(0, nationCode, phoneNum, &quot;【BigSakana】您的注册验证码为&quot;+code, &quot;&quot;, &quot;&quot;);</code></pre><p>参考了<a href="https://cloud.tencent.com/document/product/382/13613" target="_blank" rel="noopener">官方的开发指南</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于用腾讯云短信接口实现了短信注册码！ 一路摸索，好在柳暗花明，遇到的问题最终都解决了。  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/02/15/%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81/1.JPG&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="小程序" scheme="http://alvin103.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="Java" scheme="http://alvin103.github.io/tags/Java/"/>
    
      <category term="Redis" scheme="http://alvin103.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>PAT-1025-反转链表</title>
    <link href="http://alvin103.github.io/2020/02/12/PAT-1025-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://alvin103.github.io/2020/02/12/PAT-1025-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2020-02-12T07:46:22.000Z</published>
    <updated>2020-02-17T14:16:38.424Z</updated>
    
    <content type="html"><![CDATA[<p>静态链表，通过数组模拟，数组下标表示地址。<br>结点定义 需要加一个标记 因为可能给出不连在链表里的结点。<br>注意最后不足K个不反转。</p><p>1.可通过按标记排序把所有结点放到前面,控制输出完成逆序</p><pre><code>struct Node {    int adress, data, next;    int order;  //结点在链表上的序号 无效记为maxn } node[maxn];</code></pre><p>2.也可以模拟链表真实进行反转，</p><pre><code>typedef struct Node{    int address;    int num;    int next;    struct Node *link;}LNode, *Pin;</code></pre><a id="more"></a><hr><p>给定一个常数 K 以及一个单链表 L，请编写程序将 L 中每 K 个结点反转。例如：给定 L 为 1→2→3→4→5→6，K 为 3，则输出应该为 3→2→1→6→5→4；如果 K 为 4，则输出应该为 4→3→2→1→5→6，即最后不到 K 个元素不反转。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>每个输入包含 1 个测试用例。每个测试用例第 1 行给出第 1 个结点的地址、结点总个数正整数 N (≤105)、以及正整数 K (≤N)，即要求反转的子链结点的个数。结点的地址是 5 位非负整数，NULL 地址用 −1 表示。<br>接下来有 N 行，每行格式为：<br>Address Data Next<br>其中 Address 是结点地址，Data 是该结点保存的整数数据，Next 是下一结点的地址。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。<br><img src="/2020/02/12/PAT-1025-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/1.JPG" alt="1"></p><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> adress, data, next;</span><br><span class="line">    <span class="keyword">int</span> order;  <span class="comment">//结点在链表上的序号 无效记为maxn</span></span><br><span class="line">&#125; node[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node a, Node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.order &lt; b.order;   <span class="comment">//按 order 从小到大排列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; i++) node[i].order = maxn; <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">begin</span>, n, k, adress;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; <span class="built_in">begin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;    <span class="comment">//记录数据</span></span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;adress;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; node[adress].data &gt;&gt; node[adress].next;</span><br><span class="line">        node[adress].adress = adress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="built_in">begin</span>, count = <span class="number">0</span>;   <span class="comment">//count 记录有效结点数目</span></span><br><span class="line">    <span class="keyword">while</span>(p != <span class="number">-1</span>) &#123;    <span class="comment">//遍历标记所有有效结点</span></span><br><span class="line">        node[p].order = count++;</span><br><span class="line">        p = node[p].next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(node, node + maxn, cmp);   <span class="comment">//整个按order从头到尾排序</span></span><br><span class="line">    n = count;  <span class="comment">//排序后前count个是有效结点 书写方便 把count赋给 n</span></span><br><span class="line">    <span class="comment">//输出  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n / k; i++) &#123; <span class="comment">//分块</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = (i + <span class="number">1</span>) * k - <span class="number">1</span>; j &gt; i * k; j--) <span class="comment">//逆序输出  </span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%05d %d %05d\n"</span>, node[j].adress, node[j].data, node[j<span class="number">-1</span>].adress);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%05d %d "</span>, node[i * k].adress, node[i * k].data); <span class="comment">//每一块的衔接结点单独控制  </span></span><br><span class="line">        <span class="comment">//若不是最后一个衔接点 输出的next地址为下一块的末尾地址</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; n / k - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%05d\n"</span>, node[(i + <span class="number">2</span>) * k - <span class="number">1</span>].adress);</span><br><span class="line">        <span class="keyword">else</span> &#123;  <span class="comment">//整除</span></span><br><span class="line">            <span class="keyword">if</span>(n % k == <span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;<span class="comment">//最后一块若不到K个元素不反转</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%05d\n"</span>, node[(i + <span class="number">1</span>) * k].adress);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = n / k * k; i&lt; n; i++) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%05d %d "</span>, node[i].adress, node[i].data);</span><br><span class="line">                    <span class="keyword">if</span>(i &lt; n<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"%05d\n"</span>, node[i + <span class="number">1</span>].adress);</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/12/PAT-1025-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/2.JPG" alt="1"></p><p>以前用c写的模拟逆转链表  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="comment">//链表结构：当前地址 值 下一个结点的地址 指向下一结点的指针 </span></span><br><span class="line"><span class="keyword">int</span> address;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">link</span>;</span></span><br><span class="line">&#125;LNode, *Pin; </span><br><span class="line"></span><br><span class="line"><span class="function">Pin <span class="title">Reversed</span><span class="params">(Pin p,<span class="keyword">int</span> k)</span></span>;  <span class="comment">//反转链表 参数1头结点 2长度k </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPin</span><span class="params">(Pin p)</span></span>;<span class="comment">//输出链表 参数头结点 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N,Len=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;<span class="comment">//创建的链表结点数</span></span><br><span class="line"><span class="keyword">int</span> data[MAX_SIZE];<span class="comment">//存数据 </span></span><br><span class="line"><span class="keyword">int</span> next[MAX_SIZE];<span class="comment">//存指向的地址 </span></span><br><span class="line"><span class="keyword">int</span> temp;<span class="comment">//临时变量 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;N,&amp;Len,&amp;k); <span class="comment">//输入 第一个地址N 结点数Len 长度k </span></span><br><span class="line">LNode a[Len+<span class="number">1</span>];<span class="comment">//能存Len+1个结点的数组 </span></span><br><span class="line">a[<span class="number">0</span>].next = N;  <span class="comment">//a[0]作为头结点 无数据</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;i &lt; Len+<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);<span class="comment">//先读入地址  </span></span><br><span class="line"><span class="comment">//在这里地址的数组内存 数据放到data[]里  指向的地址放next[]</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;data[temp],&amp;next[temp]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建单链表</span></span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>].next == <span class="number">-1</span>)&#123;<span class="comment">//如果到最后一个结点 将next设为NULL </span></span><br><span class="line">a[i<span class="number">-1</span>].link = <span class="literal">NULL</span>;</span><br><span class="line">num = i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">a[i].address = a[i<span class="number">-1</span>].next;</span><br><span class="line">a[i].num = data[a[i].address];</span><br><span class="line">a[i].next = next[a[i].address];</span><br><span class="line">a[i<span class="number">-1</span>].link = &amp;a[i]; </span><br><span class="line"></span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Pin p = a;<span class="comment">//指向链表头结点 是空的 </span></span><br><span class="line">Pin rp = <span class="literal">NULL</span>;<span class="comment">//反转链表 开始设为NULL </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(k &lt;= num)&#123; </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;(num/k);i++)&#123;<span class="comment">//num/k 得到反转的段数 </span></span><br><span class="line">rp = Reversed(p,k);<span class="comment">//rp接收反转链表函数的返回值 </span></span><br><span class="line">p-&gt;link = rp;<span class="comment">//反转后的接到p后面 </span></span><br><span class="line">p-&gt;next = rp-&gt;address;<span class="comment">//更改下一个结点的地址 是rp的第一地址 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(j&lt;k)&#123;<span class="comment">//使p指向下一个段 移动p直到j==k </span></span><br><span class="line">p = p-&gt;link;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PrintPin(a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Pin <span class="title">Reversed</span><span class="params">(Pin p,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">Pin New = p-&gt;link;<span class="comment">//New 是p的下一个 </span></span><br><span class="line">Pin old = New-&gt;link;<span class="comment">//old 是p的下下个 </span></span><br><span class="line">Pin tmp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(count &lt; k)&#123;</span><br><span class="line">tmp = old-&gt;link;<span class="comment">//tmp存old后一个 </span></span><br><span class="line">old-&gt;link = New;<span class="comment">//old逆转 指向前一个 也就是new指的那个结点 </span></span><br><span class="line">old-&gt;next = New-&gt;address;</span><br><span class="line">New = old;<span class="comment">//new 变为后面一个 </span></span><br><span class="line">old = tmp;<span class="comment">//old 变为后面一个 </span></span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;link-&gt;link = old;<span class="comment">//逆转后的末尾接上old </span></span><br><span class="line"><span class="keyword">if</span>(old != <span class="literal">NULL</span>)&#123;</span><br><span class="line">p-&gt;link-&gt;next = old-&gt;address;<span class="comment">//末尾的next值更新 </span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">p-&gt;link-&gt;next = <span class="number">-1</span>;<span class="comment">//若是最后 更新尾指针为-1 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> New;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPin</span><span class="params">(Pin s)</span></span>&#123;</span><br><span class="line">Pin p = s;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;link != <span class="literal">NULL</span>)&#123;</span><br><span class="line">p = p-&gt;link;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;next!=<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.5d %d %.5d\n"</span>,p-&gt;address,p-&gt;num,p-&gt;next);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.5d %d %d\n"</span>,p-&gt;address,p-&gt;num,p-&gt;next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;静态链表，通过数组模拟，数组下标表示地址。&lt;br&gt;结点定义 需要加一个标记 因为可能给出不连在链表里的结点。&lt;br&gt;注意最后不足K个不反转。&lt;/p&gt;
&lt;p&gt;1.可通过按标记排序把所有结点放到前面,控制输出完成逆序&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct Node {
    int adress, data, next;
    int order;  //结点在链表上的序号 无效记为maxn 
} node[maxn];&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.也可以模拟链表真实进行反转，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typedef struct Node{
    int address;
    int num;
    int next;
    struct Node *link;
}LNode, *Pin;&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="PAT" scheme="http://alvin103.github.io/categories/PAT/"/>
    
    
      <category term="ds" scheme="http://alvin103.github.io/tags/ds/"/>
    
      <category term="链表" scheme="http://alvin103.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="c++" scheme="http://alvin103.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>PAT-分数四则运算-B1034-A1088</title>
    <link href="http://alvin103.github.io/2020/02/12/PAT-%E5%88%86%E6%95%B0%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97-B1034-A1088/"/>
    <id>http://alvin103.github.io/2020/02/12/PAT-%E5%88%86%E6%95%B0%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97-B1034-A1088/</id>
    <published>2020-02-12T07:09:00.000Z</published>
    <updated>2020-02-17T14:07:33.272Z</updated>
    
    <content type="html"><![CDATA[<p>假分数的表示和化简，四则运算，控制输出。<br>代码虽长但是分成每个问题逐一解决。</p><a id="more"></a><hr><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入在一行中按照 a1/b1 a2/b2 的格式给出两个分数形式的有理数，其中分子和分母全是整型范围内的整数，负号只可能出现在分子前，分母不为 0。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>分别在 4 行中按照 有理数1 运算符 有理数2 = 结果 的格式顺序输出 2 个有理数的和、差、积、商。注意输出的每个有理数必须是该有理数的最简形式 k a/b，其中 k 是整数部分，a/b 是最简分数部分；若为负数，则须加括号；若除法分母为 0，则输出 Inf。题目保证正确的输出中没有超过整型范围的整数。</p><p><img src="/2020/02/12/PAT-%E5%88%86%E6%95%B0%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97-B1034-A1088/2.JPG" alt="1"></p><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//有理数四则运算</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;   <span class="comment">//int int 相乘 最大可达到 long long</span></span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span> </span>&#123;    <span class="comment">//辗转相除法求最大公约数</span></span><br><span class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fraction</span> &#123;</span><span class="comment">//分数</span></span><br><span class="line">    ll up, down;<span class="comment">//分子分母</span></span><br><span class="line">&#125;a, b;</span><br><span class="line"><span class="comment">/*  1. 分数为负数使分子为负</span></span><br><span class="line"><span class="comment">    2. 分数为0 分子为 0 分母为 1</span></span><br><span class="line"><span class="comment">    3. 分子和分母没有除 1 以外的公约数（也就是化最简）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Fraction <span class="title">reduction</span><span class="params">(Fraction result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(result.down &lt; <span class="number">0</span>) &#123;   <span class="comment">//分母为负 令上下都变为相反数</span></span><br><span class="line">        result.up = -result.up;</span><br><span class="line">        result.down = -result.down;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(result.up == <span class="number">0</span>)  &#123;   <span class="comment">//分子为 0 令分母为1</span></span><br><span class="line">        result.down = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;    <span class="comment">//分子不为 0 约分 找公约数相除</span></span><br><span class="line">        <span class="keyword">int</span> d = gcd(<span class="built_in">abs</span>(result.up), <span class="built_in">abs</span>(result.down));</span><br><span class="line">        result.up /= d;</span><br><span class="line">        result.down /= d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Fraction <span class="title">add</span><span class="params">(Fraction f1, Fraction f2)</span> </span>&#123;    <span class="comment">//加法</span></span><br><span class="line">    Fraction result;</span><br><span class="line">    result.up = f1.up * f2.down + f1.down * f2.up;</span><br><span class="line">    result.down = f1.down * f2.down;</span><br><span class="line">    <span class="keyword">return</span> reduction(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Fraction <span class="title">minu</span><span class="params">(Fraction f1, Fraction f2)</span> </span>&#123;   <span class="comment">//减法</span></span><br><span class="line">    Fraction result;</span><br><span class="line">    result.up = f1.up * f2.down - f1.down * f2.up;</span><br><span class="line">    result.down = f1.down * f2.down;</span><br><span class="line">    <span class="keyword">return</span> reduction(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Fraction <span class="title">multi</span><span class="params">(Fraction f1, Fraction f2)</span> </span>&#123;  <span class="comment">//乘法</span></span><br><span class="line">    Fraction result;</span><br><span class="line">    result.up = f1.up * f2.up;</span><br><span class="line">    result.down = f1.down * f2.down;</span><br><span class="line">    <span class="keyword">return</span> reduction(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Fraction <span class="title">divide</span><span class="params">(Fraction f1, Fraction f2)</span> </span>&#123;<span class="comment">//除法</span></span><br><span class="line">    Fraction result;</span><br><span class="line">    result.up = f1.up * f2.down;</span><br><span class="line">    result.down = f1.down * f2.up;</span><br><span class="line">    <span class="keyword">return</span> reduction(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showResult</span><span class="params">(Fraction r)</span> </span>&#123;   <span class="comment">//输出分数 r</span></span><br><span class="line">    r = reduction(r);</span><br><span class="line">    <span class="keyword">if</span>(r.up&lt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"("</span>);</span><br><span class="line">    <span class="keyword">if</span>(r.down == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%lld"</span>, r.up);   <span class="comment">//整数</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(r.up) &gt; r.down) &#123;           <span class="comment">//假分数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld %lld/%lld"</span>, r.up / r.down, <span class="built_in">abs</span>(r.up) % r.down, r.down);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;                                 <span class="comment">//真分数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld/%lld"</span>, r.up, r.down);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r.up&lt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">")"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld/%lld %lld/%lld"</span>, &amp;a.up, &amp;a.down, &amp;b.up, &amp;b.down);</span><br><span class="line">    <span class="comment">//加</span></span><br><span class="line">    showResult(a);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">" + "</span>;</span><br><span class="line">    showResult(b);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">" = "</span>;</span><br><span class="line">    showResult(add(a, b));</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//减</span></span><br><span class="line">    showResult(a);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">" - "</span>;</span><br><span class="line">    showResult(b);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">" = "</span>;</span><br><span class="line">    showResult(minu(a, b));  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//乘</span></span><br><span class="line">    showResult(a);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">" * "</span>;</span><br><span class="line">    showResult(b);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">" = "</span>;</span><br><span class="line">    showResult(multi(a, b));  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//除</span></span><br><span class="line">    showResult(a);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">" / "</span>;</span><br><span class="line">    showResult(b);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">" = "</span>;</span><br><span class="line">    <span class="keyword">if</span>(b.up == <span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"Inf"</span>; <span class="comment">//特殊情况 除数为0</span></span><br><span class="line">    <span class="keyword">else</span>    showResult(divide(a, b)); </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>负号只加在分子上<br>化简的细节，考虑所有的情况<br>数据范围要用long long int乘法会溢出<br>求最大公约数时加绝对值<br>除数0时需要特别处理  </p><p><img src="/2020/02/12/PAT-%E5%88%86%E6%95%B0%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97-B1034-A1088/1.JPG" alt="1"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假分数的表示和化简，四则运算，控制输出。&lt;br&gt;代码虽长但是分成每个问题逐一解决。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PAT" scheme="http://alvin103.github.io/categories/PAT/"/>
    
    
      <category term="c++" scheme="http://alvin103.github.io/tags/c/"/>
    
      <category term="数学问题" scheme="http://alvin103.github.io/tags/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>BJFUOJ-(263-272)-BinaryTree</title>
    <link href="http://alvin103.github.io/2020/02/12/BJFUOJ-(263-272)-BinaryTree/"/>
    <id>http://alvin103.github.io/2020/02/12/BJFUOJ-(263-272)-BinaryTree/</id>
    <published>2020-02-12T04:14:05.000Z</published>
    <updated>2020-02-17T14:16:47.339Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.bjfuacm.com/structure?tag=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&page=1" target="_blank" rel="noopener">BJFUOJ | Data Structure</a></p><!-- TOC --><ul><li><a href="#主体-二叉树结点定义按给定先序建树以及删除">主体 二叉树结点定义，按给定先序建树以及删除</a></li><li><a href="#263-基于二叉链表的二叉树结构相等的判断">(263) 基于二叉链表的二叉树结构相等的判断</a></li><li><a href="#264-基于二叉链表的二叉树左右孩子的交换">(264) 基于二叉链表的二叉树左右孩子的交换</a></li><li><a href="#265269-基于二叉链表的二叉树前中后双序遍历-递归">(265&amp;269) 基于二叉链表的二叉树前中后双序遍历 （递归）</a></li><li><a href="#266-基于二叉链表的二叉树最大宽度">(266) 基于二叉链表的二叉树最大宽度</a></li><li><a href="#267271-基于二叉链表的二叉树最长路径--高度">(267&amp;271) 基于二叉链表的二叉树最长路径  高度</a></li><li><a href="#268-基于二叉链表的二叉树叶子结点到根节点的路径">(268) 基于二叉链表的二叉树叶子结点到根节点的路径</a></li><li><a href="#270-基于二叉链表的二叉树统计度为-0-1-2-结点个数">(270) 基于二叉链表的二叉树统计度为 0 1 2 结点个数</a></li><li><a href="#272-基于二叉链表的二叉树表达式求值">(272) 基于二叉链表的二叉树表达式求值</a></li></ul><!-- /TOC --><p>复习了树的相关知识，模拟建树，绝知此事要躬行！很多方法要求递归实现，在写递归时，要注意边界条件，递归的前进段、返回段。在脑中模拟出递归的流程。</p><a id="more"></a><hr><h2 id="主体-二叉树结点定义，按给定先序建树以及删除"><a href="#主体-二叉树结点定义，按给定先序建树以及删除" class="headerlink" title="主体 二叉树结点定义，按给定先序建树以及删除"></a>主体 二叉树结点定义，按给定先序建树以及删除</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义结点    BinTree代表指向一个TNode的指针</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    TNode* lchild;</span><br><span class="line">    TNode* rchild;</span><br><span class="line">&#125;*BinTree;</span><br><span class="line"></span><br><span class="line"><span class="function">BinTree <span class="title">Create</span><span class="params">(<span class="built_in">string</span> &amp;a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Det</span><span class="params">(BinTree T)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreT</span><span class="params">(BinTree T)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InT</span><span class="params">(BinTree T)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PosT</span><span class="params">(BinTree T)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreTTwice</span><span class="params">(BinTree T)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Heigh</span><span class="params">(BinTree T)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">D0</span><span class="params">(BinTree T)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">D1</span><span class="params">(BinTree T)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">D2</span><span class="params">(BinTree T)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Path0</span><span class="params">(BinTree T, <span class="keyword">char</span> path[], <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PathMax</span><span class="params">(BinTree T, <span class="keyword">char</span> path[], <span class="keyword">int</span> len, <span class="keyword">bool</span> &amp;first, <span class="keyword">int</span> <span class="built_in">height</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLevelWidth</span><span class="params">(BinTree T, <span class="keyword">int</span> level)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Width</span><span class="params">(BinTree T)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(BinTree T)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Check</span><span class="params">(BinTree T1, BinTree T2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用函数</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  按给定 先序遍历 递归建立二叉树 </span></span><br><span class="line"><span class="function">BinTree <span class="title">Create</span><span class="params">(<span class="built_in">string</span> &amp;a)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>] == <span class="string">'0'</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;       <span class="comment">//'0'表示结点为空</span></span><br><span class="line">    BinTree T = <span class="keyword">new</span> TNode;</span><br><span class="line">    T-&gt;data = a[<span class="number">0</span>];</span><br><span class="line">    a = a.substr(<span class="number">1</span>);</span><br><span class="line">    T-&gt;lchild = Create(a);</span><br><span class="line">    a = a.substr(<span class="number">1</span>);</span><br><span class="line">    T-&gt;rchild = Create(a);</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除树 递归free所有结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Det</span><span class="params">(BinTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T) &#123;</span><br><span class="line">        Det(T-&gt;lchild);</span><br><span class="line">        Det(T-&gt;rchild);</span><br><span class="line">        <span class="built_in">free</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="263-基于二叉链表的二叉树结构相等的判断"><a href="#263-基于二叉链表的二叉树结构相等的判断" class="headerlink" title="(263) 基于二叉链表的二叉树结构相等的判断"></a>(263) 基于二叉链表的二叉树结构相等的判断</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Check</span><span class="params">(BinTree T1, BinTree T2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T1 &amp;&amp; T2) &#123;          <span class="comment">//列出不等的条件</span></span><br><span class="line">        <span class="keyword">if</span>(T1-&gt;data != T2-&gt;data) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(!Check(T1-&gt;lchild, T2-&gt;lchild)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(!Check(T1-&gt;rchild, T2-&gt;rchild)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> T1 == T2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="264-基于二叉链表的二叉树左右孩子的交换"><a href="#264-基于二叉链表的二叉树左右孩子的交换" class="headerlink" title="(264) 基于二叉链表的二叉树左右孩子的交换"></a>(264) 基于二叉链表的二叉树左右孩子的交换</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(BinTree T)</span> </span>&#123;      <span class="comment">//递归实现</span></span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    BinTree p = T-&gt;rchild;</span><br><span class="line">    T-&gt;rchild = T-&gt;lchild;</span><br><span class="line">    T-&gt;lchild = p;</span><br><span class="line">    Swap(T-&gt;lchild);</span><br><span class="line">    Swap(T-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="265-amp-269-基于二叉链表的二叉树前中后双序遍历-（递归）"><a href="#265-amp-269-基于二叉链表的二叉树前中后双序遍历-（递归）" class="headerlink" title="(265&amp;269) 基于二叉链表的二叉树前中后双序遍历 （递归）"></a>(265&amp;269) 基于二叉链表的二叉树前中后双序遍历 （递归）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实质是控制第几次访问时输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreT</span><span class="params">(BinTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; T-&gt;data;</span><br><span class="line">    PreT(T-&gt;lchild);</span><br><span class="line">    PreT(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InT</span><span class="params">(BinTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    InT(T-&gt;lchild);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; T-&gt;data;</span><br><span class="line">    InT(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PosT</span><span class="params">(BinTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    PosT(T-&gt;lchild);</span><br><span class="line">    PosT(T-&gt;rchild);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; T-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreTTwice</span><span class="params">(BinTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; T-&gt;data;</span><br><span class="line">    PreTTwice(T-&gt;lchild);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; T-&gt;data;</span><br><span class="line">    PreTTwice(T-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="266-基于二叉链表的二叉树最大宽度"><a href="#266-基于二叉链表的二叉树最大宽度" class="headerlink" title="(266) 基于二叉链表的二叉树最大宽度"></a>(266) 基于二叉链表的二叉树最大宽度</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLevelWidth</span><span class="params">(BinTree T, <span class="keyword">int</span> level)</span> </span>&#123;   <span class="comment">//计算指定层的宽度 递归 </span></span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(level == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> GetLevelWidth(T-&gt;lchild, level - <span class="number">1</span>) + GetLevelWidth(T-&gt;rchild, level - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Width</span><span class="params">(BinTree T)</span> </span>&#123;      <span class="comment">//取最大宽度</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = INT_MIN;</span><br><span class="line">    <span class="keyword">int</span> H = Heigh(T);</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">width</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= H; i++) &#123;</span><br><span class="line">        <span class="built_in">width</span> = GetLevelWidth(T, i);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">width</span> &gt; <span class="built_in">max</span>) <span class="built_in">max</span> = <span class="built_in">width</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="267-amp-271-基于二叉链表的二叉树最长路径-高度"><a href="#267-amp-271-基于二叉链表的二叉树最长路径-高度" class="headerlink" title="(267&amp;271) 基于二叉链表的二叉树最长路径  高度"></a>(267&amp;271) 基于二叉链表的二叉树最长路径  高度</h2><p>求最长路径要用到树高</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PathMax</span><span class="params">(BinTree T, <span class="keyword">char</span> path[], <span class="keyword">int</span> len, <span class="keyword">bool</span> &amp;first, <span class="keyword">int</span> <span class="built_in">height</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(T-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; T-&gt;rchild == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(first &amp;&amp; len + <span class="number">1</span> == <span class="built_in">height</span>) &#123;    <span class="comment">//最长路径长度等于二叉树高度 此时顺序输出path内容即为路径</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) <span class="built_in">cout</span> &lt;&lt; path[i];</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; T-&gt;data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            first = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;    <span class="comment">//将走过结点放入path数组 递归寻找最长路径</span></span><br><span class="line">        path[len++] = T-&gt;data;</span><br><span class="line">        PathMax(T-&gt;lchild, path, len, first, <span class="built_in">height</span>);</span><br><span class="line">        PathMax(T-&gt;rchild, path, len, first, <span class="built_in">height</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="268-基于二叉链表的二叉树叶子结点到根节点的路径"><a href="#268-基于二叉链表的二叉树叶子结点到根节点的路径" class="headerlink" title="(268) 基于二叉链表的二叉树叶子结点到根节点的路径"></a>(268) 基于二叉链表的二叉树叶子结点到根节点的路径</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Path0</span><span class="params">(BinTree T, <span class="keyword">char</span> path[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(T-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; T-&gt;rchild == <span class="literal">NULL</span>) &#123;   <span class="comment">//遇到叶子结点 输出路径</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; T-&gt;data;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = len<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">cout</span> &lt;&lt; path[i];</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;    <span class="comment">//path记录路径</span></span><br><span class="line">        path[len++] = T-&gt;data;</span><br><span class="line">        Path0(T-&gt;lchild, path, len);</span><br><span class="line">        Path0(T-&gt;rchild, path, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="270-基于二叉链表的二叉树统计度为-0-1-2-结点个数"><a href="#270-基于二叉链表的二叉树统计度为-0-1-2-结点个数" class="headerlink" title="(270) 基于二叉链表的二叉树统计度为 0 1 2 结点个数"></a>(270) 基于二叉链表的二叉树统计度为 0 1 2 结点个数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//控制四种情况的返回值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">D0</span><span class="params">(BinTree T)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(T-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; T-&gt;rchild == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;lchild == <span class="literal">NULL</span>) <span class="keyword">return</span> D0(T-&gt;rchild);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;rchild == <span class="literal">NULL</span>) <span class="keyword">return</span> D0(T-&gt;lchild);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> D0(T-&gt;lchild) + D0(T-&gt;rchild);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">D1</span><span class="params">(BinTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; T-&gt;rchild == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;lchild == <span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">1</span> + D1(T-&gt;rchild);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;rchild == <span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">1</span> + D1(T-&gt;lchild);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> D1(T-&gt;lchild) + D1(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">D2</span><span class="params">(BinTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; T-&gt;rchild == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;lchild == <span class="literal">NULL</span>) <span class="keyword">return</span> D2(T-&gt;rchild);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;rchild == <span class="literal">NULL</span>) <span class="keyword">return</span> D2(T-&gt;lchild);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span> + D2(T-&gt;lchild) + D2(T-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="272-基于二叉链表的二叉树表达式求值"><a href="#272-基于二叉链表的二叉树表达式求值" class="headerlink" title="(272) 基于二叉链表的二叉树表达式求值"></a>(272) 基于二叉链表的二叉树表达式求值</h2><p>我们通常计算的表达式是中缀 比如 2<em>(2+5) = ？ ，计算机喜欢后缀表达式 225+</em> =  ?  ^ _ ^，首先将输入的中缀表达式转成二叉树表示，然后利用后序遍历递归算法计算表达式值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.bjfuacm.com/structure?tag=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&amp;page=1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BJFUOJ | Data Structure&lt;/a&gt;&lt;/p&gt;
&lt;!-- TOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#主体-二叉树结点定义按给定先序建树以及删除&quot;&gt;主体 二叉树结点定义，按给定先序建树以及删除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#263-基于二叉链表的二叉树结构相等的判断&quot;&gt;(263) 基于二叉链表的二叉树结构相等的判断&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#264-基于二叉链表的二叉树左右孩子的交换&quot;&gt;(264) 基于二叉链表的二叉树左右孩子的交换&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#265269-基于二叉链表的二叉树前中后双序遍历-递归&quot;&gt;(265&amp;amp;269) 基于二叉链表的二叉树前中后双序遍历 （递归）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#266-基于二叉链表的二叉树最大宽度&quot;&gt;(266) 基于二叉链表的二叉树最大宽度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#267271-基于二叉链表的二叉树最长路径--高度&quot;&gt;(267&amp;amp;271) 基于二叉链表的二叉树最长路径  高度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#268-基于二叉链表的二叉树叶子结点到根节点的路径&quot;&gt;(268) 基于二叉链表的二叉树叶子结点到根节点的路径&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#270-基于二叉链表的二叉树统计度为-0-1-2-结点个数&quot;&gt;(270) 基于二叉链表的二叉树统计度为 0 1 2 结点个数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#272-基于二叉链表的二叉树表达式求值&quot;&gt;(272) 基于二叉链表的二叉树表达式求值&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;

&lt;p&gt;复习了树的相关知识，模拟建树，绝知此事要躬行！很多方法要求递归实现，在写递归时，要注意边界条件，递归的前进段、返回段。在脑中模拟出递归的流程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="BJFUOJ" scheme="http://alvin103.github.io/categories/BJFUOJ/"/>
    
    
      <category term="ds" scheme="http://alvin103.github.io/tags/ds/"/>
    
      <category term="二叉树" scheme="http://alvin103.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>BJFUOJ-(214-223)-LinkList</title>
    <link href="http://alvin103.github.io/2020/02/11/BJFUOJ-(214-223)-LinkList/"/>
    <id>http://alvin103.github.io/2020/02/11/BJFUOJ-(214-223)-LinkList/</id>
    <published>2020-02-10T16:27:40.000Z</published>
    <updated>2020-02-17T14:16:20.974Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.bjfuacm.com/structure?tag=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&page=1" target="_blank" rel="noopener">BJFUOJ | Data Structure</a>  </p><!-- TOC --><ul><li><a href="#主体">主体</a></li><li><a href="#214-基于链式存储结构的图书信息表的创建和输出">(214) 基于链式存储结构的图书信息表的创建和输出</a></li><li><a href="#215-基于链式存储结构的图书信息表的排序">(215) 基于链式存储结构的图书信息表的排序</a></li><li><a href="#216-基于链式存储结构的图书信息表的修改">(216) 基于链式存储结构的图书信息表的修改</a></li><li><a href="#217-基于链式存储结构的图书信息表的逆序存储">(217) 基于链式存储结构的图书信息表的逆序存储</a></li><li><a href="#218-基于链式存储结构的图书信息表的最贵图书查找">(218) 基于链式存储结构的图书信息表的最贵图书查找</a></li><li><a href="#219-基于链式存储结构的图书信息表的最爱图书查找">(219) 基于链式存储结构的图书信息表的最爱图书查找</a></li><li><a href="#220-基于链式存储结构的图书信息表的最佳位置图书查找">(220) 基于链式存储结构的图书信息表的最佳位置图书查找</a></li><li><a href="#221-基于链式存储结构的图书信息表的新图书入库">(221) 基于链式存储结构的图书信息表的新图书入库</a></li><li><a href="#222-基于链式存储结构的图书信息表的旧图书出库">(222) 基于链式存储结构的图书信息表的旧图书出库</a></li><li><a href="#223-基于链式存储结构的图书信息表的去重">(223) 基于链式存储结构的图书信息表的去重</a></li></ul><!-- /TOC --><p>复习了链表的相关知识，创建链表以及链表的基本操作的实现。</p><a id="more"></a><hr><h2 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//图书结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> &#123;</span></span><br><span class="line">    <span class="built_in">string</span> num;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">double</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//链表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">    book data;</span><br><span class="line">    LNode* next;</span><br><span class="line">&#125;*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkList <span class="title">Create1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">LinkList <span class="title">Create2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(LinkList p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortLink</span><span class="params">(LinkList t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modify</span><span class="params">(LinkList p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RevLink</span><span class="params">(LinkList p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMax</span><span class="params">(LinkList p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintFav</span><span class="params">(LinkList p, <span class="built_in">string</span> t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Addbook</span><span class="params">(LinkList p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delbook</span><span class="params">(LinkList p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Rembook</span><span class="params">(LinkList p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Bestposition</span><span class="params">(LinkList p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;<span class="comment">//图书数量</span></span><br><span class="line"><span class="keyword">double</span> avg=<span class="number">0</span>;<span class="comment">//平均值</span></span><br><span class="line"><span class="keyword">int</span> n;<span class="comment">//指定数量</span></span><br><span class="line"><span class="keyword">double</span> maxbook = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> maxbooknum = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用函数</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">  </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="214-基于链式存储结构的图书信息表的创建和输出"><a href="#214-基于链式存储结构的图书信息表的创建和输出" class="headerlink" title="(214) 基于链式存储结构的图书信息表的创建和输出"></a>(214) 基于链式存储结构的图书信息表的创建和输出</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不给数量 建表并输出图书数量</span></span><br><span class="line"><span class="function">LinkList <span class="title">Create1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LinkList head = <span class="keyword">new</span> LNode;</span><br><span class="line">    LinkList p = head;</span><br><span class="line">    book t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t.num &gt;&gt; t.name &gt;&gt; t.price;</span><br><span class="line">    <span class="keyword">for</span>(; !(t.num == <span class="string">"0"</span> &amp;&amp; t.name == <span class="string">"0"</span> &amp;&amp; t.price == <span class="number">0</span>); cnt++) &#123;</span><br><span class="line">        LinkList temp = <span class="keyword">new</span> LNode;</span><br><span class="line">        temp-&gt;data = t;</span><br><span class="line">        p-&gt;next = temp;</span><br><span class="line">        p = temp;</span><br><span class="line">        avg += t.price;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t.num &gt;&gt; t.name &gt;&gt; t.price;</span><br><span class="line">    &#125;</span><br><span class="line">    avg /= cnt;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(LinkList p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(p) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s %s %.2lf\n"</span>, p-&gt;data.num.c_str(), p-&gt;data.name.c_str(), p-&gt;data.price);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="215-基于链式存储结构的图书信息表的排序"><a href="#215-基于链式存储结构的图书信息表的排序" class="headerlink" title="(215) 基于链式存储结构的图书信息表的排序"></a>(215) 基于链式存储结构的图书信息表的排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortLink</span><span class="params">(LinkList p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = cnt<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        LinkList t = p;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; --j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(t-&gt;data.price &lt; t-&gt;next-&gt;data.price) </span><br><span class="line">                swap(t-&gt;data, t-&gt;next-&gt;data);</span><br><span class="line">            t = t-&gt;next;</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="216-基于链式存储结构的图书信息表的修改"><a href="#216-基于链式存储结构的图书信息表的修改" class="headerlink" title="(216) 基于链式存储结构的图书信息表的修改"></a>(216) 基于链式存储结构的图书信息表的修改</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modify</span><span class="params">(LinkList p)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, avg);</span><br><span class="line">    <span class="keyword">while</span>(p) &#123;</span><br><span class="line">        p-&gt;data.price *= p-&gt;data.price &lt; avg ? <span class="number">1.2</span> : <span class="number">1.1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s %s %.2lf\n"</span>, p-&gt;data.num.c_str(), p-&gt;data.name.c_str(), p-&gt;data.price);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="217-基于链式存储结构的图书信息表的逆序存储"><a href="#217-基于链式存储结构的图书信息表的逆序存储" class="headerlink" title="(217) 基于链式存储结构的图书信息表的逆序存储"></a>(217) 基于链式存储结构的图书信息表的逆序存储</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给数量 建表</span></span><br><span class="line"><span class="function">LinkList <span class="title">Create2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LinkList head = <span class="keyword">new</span> LNode;</span><br><span class="line">    LinkList p = head;</span><br><span class="line">    book t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t.num &gt;&gt; t.name &gt;&gt; t.price;</span><br><span class="line">        LinkList temp = <span class="keyword">new</span> LNode;</span><br><span class="line">        temp-&gt;data = t;</span><br><span class="line">        p-&gt;next = temp;</span><br><span class="line">        p = temp; </span><br><span class="line">        <span class="keyword">if</span>(t.price &gt; maxbook) &#123;</span><br><span class="line">            maxbooknum = <span class="number">1</span>;</span><br><span class="line">            maxbook = t.price;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t.price == maxbook)&#123;</span><br><span class="line">            maxbooknum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//逆序存储  head -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; ....</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RevLink</span><span class="params">(LinkList p)</span> </span>&#123; </span><br><span class="line">    LinkList cur = p-&gt;next;</span><br><span class="line">    LinkList prev = <span class="literal">NULL</span>;</span><br><span class="line">    LinkList next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur) &#123;</span><br><span class="line">        next = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = prev;</span><br><span class="line">        prev = cur;</span><br><span class="line">        cur = next;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next = prev;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="218-基于链式存储结构的图书信息表的最贵图书查找"><a href="#218-基于链式存储结构的图书信息表的最贵图书查找" class="headerlink" title="(218) 基于链式存储结构的图书信息表的最贵图书查找"></a>(218) 基于链式存储结构的图书信息表的最贵图书查找</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出最贵图书</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMax</span><span class="params">(LinkList p)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; maxbooknum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">while</span>(p) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data.price == maxbook)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s %s %.2lf\n"</span>, p-&gt;data.num.c_str(), p-&gt;data.name.c_str(), p-&gt;data.price);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="219-基于链式存储结构的图书信息表的最爱图书查找"><a href="#219-基于链式存储结构的图书信息表的最爱图书查找" class="headerlink" title="(219) 基于链式存储结构的图书信息表的最爱图书查找"></a>(219) 基于链式存储结构的图书信息表的最爱图书查找</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出最爱图书</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintFav</span><span class="params">(LinkList p, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    LinkList r1 = p-&gt;next;</span><br><span class="line">    LinkList r2 = p-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(r1) &#123;</span><br><span class="line">        <span class="keyword">if</span>(r1-&gt;data.name == t) cnt++;</span><br><span class="line">        r1 = r1-&gt;next;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(cnt == <span class="number">0</span>)  <span class="built_in">printf</span>(<span class="string">"Sorry, there is no your favourite!\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">while</span>(r2) &#123;</span><br><span class="line">        <span class="keyword">if</span>(r2-&gt;data.name == t) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s %s %.2lf\n"</span>, r2-&gt;data.num.c_str(), r2-&gt;data.name.c_str(), r2-&gt;data.price);</span><br><span class="line">        r2 = r2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="220-基于链式存储结构的图书信息表的最佳位置图书查找"><a href="#220-基于链式存储结构的图书信息表的最佳位置图书查找" class="headerlink" title="(220) 基于链式存储结构的图书信息表的最佳位置图书查找"></a>(220) 基于链式存储结构的图书信息表的最佳位置图书查找</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最佳位置图书查找</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Bestposition</span><span class="params">(LinkList p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    LinkList r = p-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">        LinkList temp = r;</span><br><span class="line">        <span class="keyword">while</span>(temp) &#123;</span><br><span class="line">            t--;</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(t == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s %s %.2lf\n"</span>, temp-&gt;data.num.c_str(), temp-&gt;data.name.c_str(), temp-&gt;data.price);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">"Sorry,the book on the best position doesn't exist!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="221-基于链式存储结构的图书信息表的新图书入库"><a href="#221-基于链式存储结构的图书信息表的新图书入库" class="headerlink" title="(221) 基于链式存储结构的图书信息表的新图书入库"></a>(221) 基于链式存储结构的图书信息表的新图书入库</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入库</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Addbook</span><span class="params">(LinkList p)</span> </span>&#123;</span><br><span class="line">    LinkList r = p-&gt;next;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m; </span><br><span class="line">    book t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t.num &gt;&gt; t.name &gt;&gt; t.price;</span><br><span class="line">    <span class="keyword">if</span>(m &gt; n) <span class="built_in">printf</span>(<span class="string">"Sorry, the position to be inserted is invalid!\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(p &amp;&amp; m<span class="number">-1</span>) &#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            m--;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkList temp = <span class="keyword">new</span> LNode;</span><br><span class="line">        temp-&gt;data = t;</span><br><span class="line">        temp-&gt;next = p-&gt;next;</span><br><span class="line">        p-&gt;next = temp; </span><br><span class="line">        Print(r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="222-基于链式存储结构的图书信息表的旧图书出库"><a href="#222-基于链式存储结构的图书信息表的旧图书出库" class="headerlink" title="(222) 基于链式存储结构的图书信息表的旧图书出库"></a>(222) 基于链式存储结构的图书信息表的旧图书出库</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出库</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delbook</span><span class="params">(LinkList p)</span> </span>&#123;</span><br><span class="line">    LinkList r = p-&gt;next;</span><br><span class="line">    <span class="keyword">int</span> m; </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="keyword">if</span>(m &gt; n) <span class="built_in">printf</span>(<span class="string">"Sorry,the position to be deleted is invalid!\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(p &amp;&amp; m<span class="number">-1</span>) &#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            m--;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkList temp = p-&gt;next;</span><br><span class="line">        p-&gt;next = temp-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span>(temp);</span><br><span class="line">        Print(r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="223-基于链式存储结构的图书信息表的去重"><a href="#223-基于链式存储结构的图书信息表的去重" class="headerlink" title="(223) 基于链式存储结构的图书信息表的去重"></a>(223) 基于链式存储结构的图书信息表的去重</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//去重</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Rembook</span><span class="params">(LinkList p)</span> </span>&#123;</span><br><span class="line">    LinkList r = p-&gt;next;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator result = <span class="built_in">find</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), p-&gt;next-&gt;data.num);</span><br><span class="line">        <span class="keyword">if</span>(result == v.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            v.push_back(p-&gt;next-&gt;data.num);</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LinkList temp = p-&gt;next;</span><br><span class="line">            p-&gt;next = temp-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Print(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.bjfuacm.com/structure?tag=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&amp;page=1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BJFUOJ | Data Structure&lt;/a&gt;  &lt;/p&gt;
&lt;!-- TOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#主体&quot;&gt;主体&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#214-基于链式存储结构的图书信息表的创建和输出&quot;&gt;(214) 基于链式存储结构的图书信息表的创建和输出&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#215-基于链式存储结构的图书信息表的排序&quot;&gt;(215) 基于链式存储结构的图书信息表的排序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#216-基于链式存储结构的图书信息表的修改&quot;&gt;(216) 基于链式存储结构的图书信息表的修改&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#217-基于链式存储结构的图书信息表的逆序存储&quot;&gt;(217) 基于链式存储结构的图书信息表的逆序存储&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#218-基于链式存储结构的图书信息表的最贵图书查找&quot;&gt;(218) 基于链式存储结构的图书信息表的最贵图书查找&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#219-基于链式存储结构的图书信息表的最爱图书查找&quot;&gt;(219) 基于链式存储结构的图书信息表的最爱图书查找&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#220-基于链式存储结构的图书信息表的最佳位置图书查找&quot;&gt;(220) 基于链式存储结构的图书信息表的最佳位置图书查找&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#221-基于链式存储结构的图书信息表的新图书入库&quot;&gt;(221) 基于链式存储结构的图书信息表的新图书入库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#222-基于链式存储结构的图书信息表的旧图书出库&quot;&gt;(222) 基于链式存储结构的图书信息表的旧图书出库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#223-基于链式存储结构的图书信息表的去重&quot;&gt;(223) 基于链式存储结构的图书信息表的去重&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;

&lt;p&gt;复习了链表的相关知识，创建链表以及链表的基本操作的实现。&lt;/p&gt;
    
    </summary>
    
    
      <category term="BJFUOJ" scheme="http://alvin103.github.io/categories/BJFUOJ/"/>
    
    
      <category term="ds" scheme="http://alvin103.github.io/tags/ds/"/>
    
      <category term="链表" scheme="http://alvin103.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>BJFUOJ-(204-213)-ArrayList</title>
    <link href="http://alvin103.github.io/2020/02/10/BJFUOJ-(204-213)-ArrayList/"/>
    <id>http://alvin103.github.io/2020/02/10/BJFUOJ-(204-213)-ArrayList/</id>
    <published>2020-02-10T12:11:49.000Z</published>
    <updated>2020-02-17T14:16:15.895Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.bjfuacm.com/structure?tag=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&page=1" target="_blank" rel="noopener">BJFUOJ | Data Structure</a></p><!-- TOC --><ul><li><a href="#主体">主体</a></li><li><a href="#204-基于顺序存储结构的图书信息表的创建和输出">(204) 基于顺序存储结构的图书信息表的创建和输出</a></li><li><a href="#205-基于顺序存储结构的图书信息表的排序">(205) 基于顺序存储结构的图书信息表的排序</a></li><li><a href="#206-基于顺序存储结构的图书信息表的修改">(206) 基于顺序存储结构的图书信息表的修改</a></li><li><a href="#207-基于顺序存储结构的图书信息表的逆序存储">(207) 基于顺序存储结构的图书信息表的逆序存储</a></li><li><a href="#208-基于顺序存储结构的图书信息表的最贵图书的查找">(208) 基于顺序存储结构的图书信息表的最贵图书的查找</a></li><li><a href="#209-基于顺序存储结构的图书信息表的最爱图书的查找">(209) 基于顺序存储结构的图书信息表的最爱图书的查找</a></li><li><a href="#210-基于顺序存储结构的图书信息表的最佳位置图书的查找">(210) 基于顺序存储结构的图书信息表的最佳位置图书的查找</a></li><li><a href="#211-基于顺序存储结构的图书信息表的新图书的入库">(211) 基于顺序存储结构的图书信息表的新图书的入库</a></li><li><a href="#212-基于顺序存储结构的图书信息表的旧图书的出库">(212) 基于顺序存储结构的图书信息表的旧图书的出库</a></li><li><a href="#213-基于顺序存储结构的图书信息表的图书去重">(213) 基于顺序存储结构的图书信息表的图书去重</a></li></ul><!-- /TOC --><p>线性表-数组的基本操作，比较简单。</p><a id="more"></a><h2 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> num;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">double</span> price;</span><br><span class="line">&#125;AList[MAXSIZE];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;  <span class="comment">//个数</span></span><br><span class="line"><span class="keyword">double</span> sum = <span class="number">0</span>; <span class="comment">//总和，计算平均数用</span></span><br><span class="line"><span class="keyword">double</span> maxbook = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> maxbooknum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Create1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Create2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(book x, book y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modify</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RevCreate</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExpBook</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FavBook</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BesBook</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Addbook</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delbook</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Rembook</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *   调用函数</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="204-基于顺序存储结构的图书信息表的创建和输出"><a href="#204-基于顺序存储结构的图书信息表的创建和输出" class="headerlink" title="(204) 基于顺序存储结构的图书信息表的创建和输出"></a>(204) 基于顺序存储结构的图书信息表的创建和输出</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Create1</span><span class="params">()</span> </span>&#123;    <span class="comment">//不给数量创建</span></span><br><span class="line">    book temp;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; temp.num &gt;&gt; temp.name &gt;&gt; temp.price) &#123;</span><br><span class="line">        <span class="keyword">if</span>(temp.num == <span class="string">"0"</span> &amp;&amp; temp.name == <span class="string">"0"</span> &amp;&amp; temp.price == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        AList[n++] = temp;</span><br><span class="line">        sum += temp.price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123;    <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s %s %.2lf\n"</span>,AList[i].num.c_str(), AList[i].name.c_str(), AList[i].price);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="205-基于顺序存储结构的图书信息表的排序"><a href="#205-基于顺序存储结构的图书信息表的排序" class="headerlink" title="(205) 基于顺序存储结构的图书信息表的排序"></a>(205) 基于顺序存储结构的图书信息表的排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(book x, book y)</span> </span>&#123;  <span class="comment">//排序 价格降序</span></span><br><span class="line">    <span class="keyword">return</span> x.price &gt; y.price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="206-基于顺序存储结构的图书信息表的修改"><a href="#206-基于顺序存储结构的图书信息表的修改" class="headerlink" title="(206) 基于顺序存储结构的图书信息表的修改"></a>(206) 基于顺序存储结构的图书信息表的修改</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modify</span><span class="params">()</span> </span>&#123;   <span class="comment">//修改</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, sum / n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        AList[i].price *= (AList[i].price &lt; (sum / n) ? <span class="number">1.2</span> : <span class="number">1.1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s %s %.2lf\n"</span>,AList[i].num.c_str(), AList[i].name.c_str(), AList[i].price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="207-基于顺序存储结构的图书信息表的逆序存储"><a href="#207-基于顺序存储结构的图书信息表的逆序存储" class="headerlink" title="(207) 基于顺序存储结构的图书信息表的逆序存储"></a>(207) 基于顺序存储结构的图书信息表的逆序存储</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RevCreate</span><span class="params">()</span> </span>&#123;  <span class="comment">//逆序存储</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;=<span class="number">0</span> ; i--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; AList[i].num &gt;&gt; AList[i].name &gt;&gt; AList[i].price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="208-基于顺序存储结构的图书信息表的最贵图书的查找"><a href="#208-基于顺序存储结构的图书信息表的最贵图书的查找" class="headerlink" title="(208) 基于顺序存储结构的图书信息表的最贵图书的查找"></a>(208) 基于顺序存储结构的图书信息表的最贵图书的查找</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Create2</span><span class="params">()</span> </span>&#123;    <span class="comment">//给数量创建</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; AList[i].num &gt;&gt; AList[i].name &gt;&gt; AList[i].price;</span><br><span class="line">        <span class="keyword">if</span>(AList[i].price &gt; maxbook) &#123;</span><br><span class="line">            maxbook = AList[i].price;</span><br><span class="line">            maxbooknum = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(AList[i].price == maxbook) maxbooknum++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最贵图书查找</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExpBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; maxbooknum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(AList[i].price == maxbook) </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s %s %.2lf\n"</span>,AList[i].num.c_str(), AList[i].name.c_str(), AList[i].price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="209-基于顺序存储结构的图书信息表的最爱图书的查找"><a href="#209-基于顺序存储结构的图书信息表的最爱图书的查找" class="headerlink" title="(209) 基于顺序存储结构的图书信息表的最爱图书的查找"></a>(209) 基于顺序存储结构的图书信息表的最爱图书的查找</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FavBook</span><span class="params">()</span> </span>&#123;    <span class="comment">//最爱图书查找</span></span><br><span class="line">    <span class="keyword">int</span> m,a[MAXSIZE];</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="built_in">string</span> t;</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(AList[i].name == t) &#123; </span><br><span class="line">                a[cnt++] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"Sorry，there is no your favourite!\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s %s %.2lf\n"</span>,AList[a[i]].num.c_str(), AList[a[i]].name.c_str(), AList[a[i]].price);</span><br><span class="line">            &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="210-基于顺序存储结构的图书信息表的最佳位置图书的查找"><a href="#210-基于顺序存储结构的图书信息表的最佳位置图书的查找" class="headerlink" title="(210) 基于顺序存储结构的图书信息表的最佳位置图书的查找"></a>(210) 基于顺序存储结构的图书信息表的最佳位置图书的查找</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BesBook</span><span class="params">()</span> </span>&#123;    <span class="comment">//最佳位置图书查找</span></span><br><span class="line">    <span class="keyword">int</span> m,t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">        <span class="keyword">if</span>(t &lt;= n &amp;&amp; t &gt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%s %s %.2lf\n"</span>,AList[t<span class="number">-1</span>].num.c_str(), AList[t<span class="number">-1</span>].name.c_str(), AList[t<span class="number">-1</span>].price);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Sorry，the book on the best position doesn't exist!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="211-基于顺序存储结构的图书信息表的新图书的入库"><a href="#211-基于顺序存储结构的图书信息表的新图书的入库" class="headerlink" title="(211) 基于顺序存储结构的图书信息表的新图书的入库"></a>(211) 基于顺序存储结构的图书信息表的新图书的入库</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Addbook</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;   <span class="comment">//新书入库</span></span><br><span class="line">    book t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t.num &gt;&gt; t.name &gt;&gt; t.price;   </span><br><span class="line">    <span class="keyword">if</span>(k &gt; n || k &lt; <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"Sorry，the position to be inserted is invalid!\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = k<span class="number">-1</span>; i &lt; n; i++)</span><br><span class="line">            swap(t, AList[i]);</span><br><span class="line">        AList[n] = t;</span><br><span class="line">        n++;</span><br><span class="line">        Print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="212-基于顺序存储结构的图书信息表的旧图书的出库"><a href="#212-基于顺序存储结构的图书信息表的旧图书的出库" class="headerlink" title="(212) 基于顺序存储结构的图书信息表的旧图书的出库"></a>(212) 基于顺序存储结构的图书信息表的旧图书的出库</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delbook</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;   <span class="comment">//旧书出库</span></span><br><span class="line">    <span class="keyword">if</span>(k &gt; n || k &lt; <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"Sorry，the position to be deleted is invalid!\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(k &lt; n + <span class="number">1</span>) &#123;</span><br><span class="line">            AList[k<span class="number">-1</span>] = AList[k];</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        n--;</span><br><span class="line">        <span class="comment">//Print();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="213-基于顺序存储结构的图书信息表的图书去重"><a href="#213-基于顺序存储结构的图书信息表的图书去重" class="headerlink" title="(213) 基于顺序存储结构的图书信息表的图书去重"></a>(213) 基于顺序存储结构的图书信息表的图书去重</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Rembook</span><span class="params">()</span> </span>&#123;    <span class="comment">//去重</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator result = <span class="built_in">find</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), AList[i].num);</span><br><span class="line">        <span class="keyword">if</span>(result == v.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            v.push_back(AList[i].num);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Delbook(i); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.bjfuacm.com/structure?tag=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&amp;page=1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BJFUOJ | Data Structure&lt;/a&gt;&lt;/p&gt;
&lt;!-- TOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#主体&quot;&gt;主体&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#204-基于顺序存储结构的图书信息表的创建和输出&quot;&gt;(204) 基于顺序存储结构的图书信息表的创建和输出&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#205-基于顺序存储结构的图书信息表的排序&quot;&gt;(205) 基于顺序存储结构的图书信息表的排序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#206-基于顺序存储结构的图书信息表的修改&quot;&gt;(206) 基于顺序存储结构的图书信息表的修改&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#207-基于顺序存储结构的图书信息表的逆序存储&quot;&gt;(207) 基于顺序存储结构的图书信息表的逆序存储&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#208-基于顺序存储结构的图书信息表的最贵图书的查找&quot;&gt;(208) 基于顺序存储结构的图书信息表的最贵图书的查找&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#209-基于顺序存储结构的图书信息表的最爱图书的查找&quot;&gt;(209) 基于顺序存储结构的图书信息表的最爱图书的查找&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#210-基于顺序存储结构的图书信息表的最佳位置图书的查找&quot;&gt;(210) 基于顺序存储结构的图书信息表的最佳位置图书的查找&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#211-基于顺序存储结构的图书信息表的新图书的入库&quot;&gt;(211) 基于顺序存储结构的图书信息表的新图书的入库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#212-基于顺序存储结构的图书信息表的旧图书的出库&quot;&gt;(212) 基于顺序存储结构的图书信息表的旧图书的出库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#213-基于顺序存储结构的图书信息表的图书去重&quot;&gt;(213) 基于顺序存储结构的图书信息表的图书去重&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;

&lt;p&gt;线性表-数组的基本操作，比较简单。&lt;/p&gt;
    
    </summary>
    
    
      <category term="BJFUOJ" scheme="http://alvin103.github.io/categories/BJFUOJ/"/>
    
    
      <category term="ds" scheme="http://alvin103.github.io/tags/ds/"/>
    
      <category term="数组" scheme="http://alvin103.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>PAT-19年秋乙级真题-擅长C</title>
    <link href="http://alvin103.github.io/2020/02/10/PAT-19%E5%B9%B4%E5%86%AC%E4%B9%99%E7%BA%A7%E7%9C%9F%E9%A2%98-%E6%93%85%E9%95%BFC/"/>
    <id>http://alvin103.github.io/2020/02/10/PAT-19%E5%B9%B4%E5%86%AC%E4%B9%99%E7%BA%A7%E7%9C%9F%E9%A2%98-%E6%93%85%E9%95%BFC/</id>
    <published>2020-02-10T11:57:39.000Z</published>
    <updated>2020-02-10T20:49:06.946Z</updated>
    
    <content type="html"><![CDATA[<p>那天在机房没做出来，太着急了,回来后静下心做了一遍，思路清晰地去写还是比较容易做出来的。  </p><hr><p>&emsp;&emsp;7-4 擅长C (20分)  </p><p><img src="/2020/02/10/PAT-19%E5%B9%B4%E5%86%AC%E4%B9%99%E7%BA%A7%E7%9C%9F%E9%A2%98-%E6%93%85%E9%95%BFC/1.jpg" alt="0"></p><a id="more"></a><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入首先给出 26 个英文大写字母 A-Z，每个字母用一个 7×5 的、由 C 和 . 组成的矩阵构成。最后在一行中给出一个句子，以回车结束。句子是由若干个单词（每个包含不超过 10 个连续的大写英文字母）组成的，单词间以任何非大写英文字母分隔。</p><p>题目保证至少给出一个单词。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>对每个单词，将其每个字母用矩阵形式在一行中输出，字母间有一列空格分隔。单词的首尾不得有多余空格。<br>相邻的两个单词间必须有一空行分隔。输出的首尾不得有多余空行。</p><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; s; <span class="comment">//用vector放26个字母  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pp</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s[a][i][j]; <span class="comment">//s[a] 第a个字母 s[a][i] </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++)&#123;<span class="comment">//每个字母是7行5列</span></span><br><span class="line"><span class="built_in">string</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">v.push_back(a);</span><br><span class="line">&#125;</span><br><span class="line">s.push_back(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> <span class="keyword">word</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="keyword">word</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">word</span>.length(); i++) &#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>], b=<span class="number">0</span>, cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">word</span>[i] &lt;= <span class="string">'Z'</span> &amp;&amp; <span class="keyword">word</span>[i] &gt;= <span class="string">'A'</span> &amp;&amp; i&lt;<span class="keyword">word</span>.length())&#123;</span><br><span class="line">a[b++] = <span class="keyword">word</span>[i] - <span class="string">'A'</span>;</span><br><span class="line">i++; cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> r1, r2;</span><br><span class="line"><span class="keyword">for</span>(r2 = <span class="number">0</span>; r2 &lt; <span class="number">7</span>; r2++) &#123;<span class="comment">//7行 </span></span><br><span class="line"><span class="keyword">for</span>(r1 = <span class="number">0</span>; r1 &lt; cnt; r1++)&#123;<span class="comment">//字母顺序 </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s[a[r1]][r2];<span class="comment">//输出字母第r2行 </span></span><br><span class="line"><span class="keyword">if</span>(r1 &lt; cnt<span class="number">-1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;<span class="comment">// </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i &lt; <span class="keyword">word</span>.length() - <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/10/PAT-19%E5%B9%B4%E5%86%AC%E4%B9%99%E7%BA%A7%E7%9C%9F%E9%A2%98-%E6%93%85%E9%95%BFC/2.JPG" alt="1"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;那天在机房没做出来，太着急了,回来后静下心做了一遍，思路清晰地去写还是比较容易做出来的。  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;7-4 擅长C (20分)  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/02/10/PAT-19%E5%B9%B4%E5%86%AC%E4%B9%99%E7%BA%A7%E7%9C%9F%E9%A2%98-%E6%93%85%E9%95%BFC/1.jpg&quot; alt=&quot;0&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="PAT" scheme="http://alvin103.github.io/categories/PAT/"/>
    
    
      <category term="c++" scheme="http://alvin103.github.io/tags/c/"/>
    
      <category term="字符串" scheme="http://alvin103.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>网页图片加载失败问题</title>
    <link href="http://alvin103.github.io/2020/02/10/pictureErr/"/>
    <id>http://alvin103.github.io/2020/02/10/pictureErr/</id>
    <published>2020-02-10T07:00:13.000Z</published>
    <updated>2020-02-10T17:26:40.986Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%e5%9b%be%e7%89%87%e9%97%ae%e9%a2%98">图片问题</a></li><li><a href="#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95">解决方法</a></li></ul><!-- /TOC --><h2 id="图片问题"><a href="#图片问题" class="headerlink" title="图片问题"></a>图片问题</h2><p>浏览某网页时发现头像等图片都挂掉了，刚开始以为是加载不出来，后来在浏览vscode插件的介绍中发现也不能加载图片。  </p><p>github &emsp;<br><img src="/2020/02/10/pictureErr/1.JPG" alt="0"></p><p>vscode  （忘记截图了^_^）</p><a id="more"></a><hr><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>经过搜索，原因可能是<a href="https://baike.baidu.com/item/DNS%E6%B1%A1%E6%9F%93" target="_blank" rel="noopener">DNS污染</a>，通过修改hosts文件解决了。</p><ul><li>C:\Windows\System32\drivers\etc 目录下 hosts 添加内容</li></ul><p><img src="/2020/02/10/pictureErr/2.JPG" alt="0"></p><p>网址可通过浏览器检查 找到<br>然后根据src<a href="www.ipaddress.com/">查询域名</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- TOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e5%9b%be%e7%89%87%e9%97%ae%e9%a2%98&quot;&gt;图片问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95&quot;&gt;解决方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
&lt;h2 id=&quot;图片问题&quot;&gt;&lt;a href=&quot;#图片问题&quot; class=&quot;headerlink&quot; title=&quot;图片问题&quot;&gt;&lt;/a&gt;图片问题&lt;/h2&gt;&lt;p&gt;浏览某网页时发现头像等图片都挂掉了，刚开始以为是加载不出来，后来在浏览vscode插件的介绍中发现也不能加载图片。  &lt;/p&gt;
&lt;p&gt;github &amp;emsp;&lt;br&gt;&lt;img src=&quot;/2020/02/10/pictureErr/1.JPG&quot; alt=&quot;0&quot;&gt;&lt;/p&gt;
&lt;p&gt;vscode  （忘记截图了^_^）&lt;/p&gt;
    
    </summary>
    
    
      <category term="none" scheme="http://alvin103.github.io/categories/none/"/>
    
    
  </entry>
  
  <entry>
    <title>MarkDown</title>
    <link href="http://alvin103.github.io/2020/02/10/MarkDown/"/>
    <id>http://alvin103.github.io/2020/02/10/MarkDown/</id>
    <published>2020-02-09T21:48:48.000Z</published>
    <updated>2020-02-09T21:48:48.468Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hexo + GitHub = Blog!</title>
    <link href="http://alvin103.github.io/2020/02/09/hexo/"/>
    <id>http://alvin103.github.io/2020/02/09/hexo/</id>
    <published>2020-02-09T13:44:18.000Z</published>
    <updated>2020-02-17T13:57:13.816Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/02/09/hexo/1.jpg" alt="1"><br>&emsp;&emsp;考研前就想过搭建属于自己的空间，之前一直使用 印象笔记 这类应用记录。而自己购买域名服务器搭建博客需要一定开销^_^，某天刷b站时了解到可以使用github page构建属于自己的小站点。<br>&emsp;&emsp;于是，在一个安静的下午，决定完成它。<br>&emsp;&emsp;使用了Hexo静态博客框架，将生成的静态网页托管在GitHub上。就愉快地走进了Blog的大门！</p><a id="more"></a><hr><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p> <a href="https://gitforwindows.org/" target="_blank" rel="noopener">下载地址</a>  </p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p> <a href="https://nodejs.org/en/" target="_blank" rel="noopener">下载地址</a></p><hr><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id><a href="#" class="headerlink" title></a></h3><p>桌面右键选择 Git Bash Here，输入命令</p><pre><code>npm install -g hexo</code></pre><h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo:"></a>初始化Hexo:</h3><p>在刚才生成的blog文件夹下 右键Git Bush Here，输入命令</p><pre><code>hexo init</code></pre><p><img src="/2020/02/09/hexo/2.jpg" alt="1"></p><h3 id="本地博客"><a href="#本地博客" class="headerlink" title="本地博客"></a>本地博客</h3><p>输入如下命令:</p><pre><code>hexo s</code></pre><p>在浏览器输入     localhost:4000  就可以访问啦</p><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><pre><code>hexo n &quot;我的第一篇blog&quot;</code></pre><hr><h2 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h2><p>刚才只是在本地生成了静态博客，接下来要发布网站，也就是将Hexo部署到Github上。</p><h3 id="new一个仓库"><a href="#new一个仓库" class="headerlink" title="new一个仓库"></a>new一个仓库</h3><p><img src="/2020/02/09/hexo/3.jpg" alt="1"></p><h3 id="安装git部署插件"><a href="#安装git部署插件" class="headerlink" title="安装git部署插件"></a>安装git部署插件</h3><p>blog下输入命令</p><pre><code>npm install --save hexo-deployer-git</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>编辑blog文件夹里的 _config.yml 文件:<br>添加 repo: 仓库地址<br>&emsp;&emsp; branch: master<br><img src="/2020/02/09/hexo/4.jpg" alt="1"><br>还可以顺便设置一下名字什么的<br><img src="/2020/02/09/hexo/2.jpg" alt="1"></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><pre><code>hexo d</code></pre><p>这时第一次会要求输入github账号密码，部署后就可以通过 alvin103.github.io 访问博客了！写了新文章可以先在本地调试好之后发布</p><p>以后发布文章输入这两个命令就ok</p><pre><code>hexo cleanhexo d -g </code></pre><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>更换了Hexo主题next ^_^  后面有时间想自己做一个Theme  </p><p>在写文章时也遇到一些问题，比如添加图片、编码格式等等都可以通过搜索获得帮助。  </p><p>写到这里，就是总结一些经验.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/02/09/hexo/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;br&gt;&amp;emsp;&amp;emsp;考研前就想过搭建属于自己的空间，之前一直使用 印象笔记 这类应用记录。而自己购买域名服务器搭建博客需要一定开销^_^，某天刷b站时了解到可以使用github page构建属于自己的小站点。&lt;br&gt;&amp;emsp;&amp;emsp;于是，在一个安静的下午，决定完成它。&lt;br&gt;&amp;emsp;&amp;emsp;使用了Hexo静态博客框架，将生成的静态网页托管在GitHub上。就愉快地走进了Blog的大门！&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客" scheme="http://alvin103.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="blog" scheme="http://alvin103.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://alvin103.github.io/2020/02/09/Hello%20World/"/>
    <id>http://alvin103.github.io/2020/02/09/Hello%20World/</id>
    <published>2020-02-09T11:44:18.000Z</published>
    <updated>2020-02-10T17:18:47.406Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#2020">2020</a></li><li><a href="#end">END</a></li></ul><!-- /TOC --><h2 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h2><p>Zzh 的 Blog 就这样开始了</p><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- TOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#2020&quot;&gt;2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#end&quot;&gt;END&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;

&lt;h2 id=&quot;2020&quot;&gt;&lt;a href=&quot;#2020&quot; clas
      
    
    </summary>
    
    
      <category term="none" scheme="http://alvin103.github.io/categories/none/"/>
    
    
  </entry>
  
</feed>
