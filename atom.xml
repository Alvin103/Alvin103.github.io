<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zzhの博客 | Alvin103</title>
  
  <subtitle>Hello world,heal the world.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://alvin103.github.io/"/>
  <updated>2020-02-10T17:26:22.201Z</updated>
  <id>http://alvin103.github.io/</id>
  
  <author>
    <name>郑子豪</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PAT-19年秋乙级真题-擅长C</title>
    <link href="http://alvin103.github.io/2020/02/10/PAT-19%E5%B9%B4%E5%86%AC%E4%B9%99%E7%BA%A7%E7%9C%9F%E9%A2%98-%E6%93%85%E9%95%BFC/"/>
    <id>http://alvin103.github.io/2020/02/10/PAT-19%E5%B9%B4%E5%86%AC%E4%B9%99%E7%BA%A7%E7%9C%9F%E9%A2%98-%E6%93%85%E9%95%BFC/</id>
    <published>2020-02-10T11:57:39.000Z</published>
    <updated>2020-02-10T17:26:22.201Z</updated>
    
    <content type="html"><![CDATA[<p>当时在考场上没做出来，太着急了,回来后静下心做了一遍，只要思路清晰还是比较容易拿满分。  </p><hr><p>&emsp;&emsp;7-4 擅长C (20分)  </p><p><img src="/2020/02/10/PAT-19%E5%B9%B4%E5%86%AC%E4%B9%99%E7%BA%A7%E7%9C%9F%E9%A2%98-%E6%93%85%E9%95%BFC/1.jpg" alt="0"></p><a id="more"></a><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入首先给出 26 个英文大写字母 A-Z，每个字母用一个 7×5 的、由 C 和 . 组成的矩阵构成。最后在一行中给出一个句子，以回车结束。句子是由若干个单词（每个包含不超过 10 个连续的大写英文字母）组成的，单词间以任何非大写英文字母分隔。</p><p>题目保证至少给出一个单词。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>对每个单词，将其每个字母用矩阵形式在一行中输出，字母间有一列空格分隔。单词的首尾不得有多余空格。<br>相邻的两个单词间必须有一空行分隔。输出的首尾不得有多余空行。</p><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; s; <span class="comment">//用vector放26个字母  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pp</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s[a][i][j]; <span class="comment">//s[a] 第a个字母 s[a][i] </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++)&#123;<span class="comment">//每个字母是7行5列</span></span><br><span class="line"><span class="built_in">string</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">v.push_back(a);</span><br><span class="line">&#125;</span><br><span class="line">s.push_back(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> <span class="keyword">word</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="keyword">word</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">word</span>.length(); i++) &#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>], b=<span class="number">0</span>, cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">word</span>[i] &lt;= <span class="string">'Z'</span> &amp;&amp; <span class="keyword">word</span>[i] &gt;= <span class="string">'A'</span> &amp;&amp; i&lt;<span class="keyword">word</span>.length())&#123;</span><br><span class="line">a[b++] = <span class="keyword">word</span>[i] - <span class="string">'A'</span>;</span><br><span class="line">i++; cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> r1, r2;</span><br><span class="line"><span class="keyword">for</span>(r2 = <span class="number">0</span>; r2 &lt; <span class="number">7</span>; r2++) &#123;<span class="comment">//7行 </span></span><br><span class="line"><span class="keyword">for</span>(r1 = <span class="number">0</span>; r1 &lt; cnt; r1++)&#123;<span class="comment">//字母顺序 </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s[a[r1]][r2];<span class="comment">//输出字母第r2行 </span></span><br><span class="line"><span class="keyword">if</span>(r1 &lt; cnt<span class="number">-1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;<span class="comment">// </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i &lt; <span class="keyword">word</span>.length() - <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/10/PAT-19%E5%B9%B4%E5%86%AC%E4%B9%99%E7%BA%A7%E7%9C%9F%E9%A2%98-%E6%93%85%E9%95%BFC/2.JPG" alt="1"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当时在考场上没做出来，太着急了,回来后静下心做了一遍，只要思路清晰还是比较容易拿满分。  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;7-4 擅长C (20分)  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/02/10/PAT-19%E5%B9%B4%E5%86%AC%E4%B9%99%E7%BA%A7%E7%9C%9F%E9%A2%98-%E6%93%85%E9%95%BFC/1.jpg&quot; alt=&quot;0&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="PAT" scheme="http://alvin103.github.io/categories/PAT/"/>
    
    
      <category term="c++" scheme="http://alvin103.github.io/tags/c/"/>
    
      <category term="字符串" scheme="http://alvin103.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>网页图片加载失败问题</title>
    <link href="http://alvin103.github.io/2020/02/10/pictureErr/"/>
    <id>http://alvin103.github.io/2020/02/10/pictureErr/</id>
    <published>2020-02-10T07:00:13.000Z</published>
    <updated>2020-02-10T17:26:40.986Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#%e5%9b%be%e7%89%87%e9%97%ae%e9%a2%98">图片问题</a></li><li><a href="#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95">解决方法</a></li></ul><!-- /TOC --><h2 id="图片问题"><a href="#图片问题" class="headerlink" title="图片问题"></a>图片问题</h2><p>浏览某网页时发现头像等图片都挂掉了，刚开始以为是加载不出来，后来在浏览vscode插件的介绍中发现也不能加载图片。  </p><p>github &emsp;<br><img src="/2020/02/10/pictureErr/1.JPG" alt="0"></p><p>vscode  （忘记截图了^_^）</p><a id="more"></a><hr><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>经过搜索，原因可能是<a href="https://baike.baidu.com/item/DNS%E6%B1%A1%E6%9F%93" target="_blank" rel="noopener">DNS污染</a>，通过修改hosts文件解决了。</p><ul><li>C:\Windows\System32\drivers\etc 目录下 hosts 添加内容</li></ul><p><img src="/2020/02/10/pictureErr/2.JPG" alt="0"></p><p>网址可通过浏览器检查 找到<br>然后根据src<a href="www.ipaddress.com/">查询域名</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- TOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e5%9b%be%e7%89%87%e9%97%ae%e9%a2%98&quot;&gt;图片问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95&quot;&gt;解决方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
&lt;h2 id=&quot;图片问题&quot;&gt;&lt;a href=&quot;#图片问题&quot; class=&quot;headerlink&quot; title=&quot;图片问题&quot;&gt;&lt;/a&gt;图片问题&lt;/h2&gt;&lt;p&gt;浏览某网页时发现头像等图片都挂掉了，刚开始以为是加载不出来，后来在浏览vscode插件的介绍中发现也不能加载图片。  &lt;/p&gt;
&lt;p&gt;github &amp;emsp;&lt;br&gt;&lt;img src=&quot;/2020/02/10/pictureErr/1.JPG&quot; alt=&quot;0&quot;&gt;&lt;/p&gt;
&lt;p&gt;vscode  （忘记截图了^_^）&lt;/p&gt;
    
    </summary>
    
    
      <category term="none" scheme="http://alvin103.github.io/categories/none/"/>
    
    
  </entry>
  
  <entry>
    <title>BJFUOJ 263-272 Binary Tree</title>
    <link href="http://alvin103.github.io/2020/02/10/BJFUOJ%20263-272%20Binary%20Tree/"/>
    <id>http://alvin103.github.io/2020/02/10/BJFUOJ%20263-272%20Binary%20Tree/</id>
    <published>2020-02-10T04:14:05.000Z</published>
    <updated>2020-02-10T17:08:28.466Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.bjfuacm.com/structure?tag=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&page=1" target="_blank" rel="noopener">BJFUOJ | Data Structure</a></p><!-- TOC --><ul><li><a href="#二叉树结点定义--按给定先序建树以及删除">二叉树结点定义  按给定先序建树以及删除</a></li><li><a href="#263-树结构相等的判断">263. 树结构相等的判断</a></li><li><a href="#264-左右孩子的交换">264. 左右孩子的交换</a></li><li><a href="#265--269-前中后双序遍历-递归">265. &amp; 269. 前中后双序遍历 （递归）</a></li><li><a href="#266-最大宽度">266. 最大宽度</a></li><li><a href="#267--271-最长路径--高度">267. &amp; 271. 最长路径  高度</a></li><li><a href="#268-叶子结点到根节点的路径">268. 叶子结点到根节点的路径</a></li><li><a href="#270-统计度为-0-1-2-结点个数">270. 统计度为 0 1 2 结点个数</a></li><li><a href="#272-s表达式求值">272. s表达式求值</a></li></ul><!-- /TOC --><hr><p>复习了树的相关知识 手动建树 欲知此事须躬行！<br>很多方法要求递归实现，在写递归时，要注意边界条件，递归的前进段、返回段。<br>脑中能模拟出递归的流程</p><hr><a id="more"></a><h2 id="二叉树结点定义-按给定先序建树以及删除"><a href="#二叉树结点定义-按给定先序建树以及删除" class="headerlink" title="二叉树结点定义  按给定先序建树以及删除"></a>二叉树结点定义  按给定先序建树以及删除</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义结点    BinTree代表指向一个TNode的指针</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    TNode* lchild;</span><br><span class="line">    TNode* rchild;</span><br><span class="line">&#125;*BinTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  按给定 先序遍历 递归建立二叉树 </span></span><br><span class="line"><span class="function">BinTree <span class="title">Create</span><span class="params">(<span class="built_in">string</span> &amp;a)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>] == <span class="string">'0'</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;       <span class="comment">//'0'表示结点为空</span></span><br><span class="line">    BinTree T = <span class="keyword">new</span> TNode;</span><br><span class="line">    T-&gt;data = a[<span class="number">0</span>];</span><br><span class="line">    a = a.substr(<span class="number">1</span>);</span><br><span class="line">    T-&gt;lchild = Create(a);</span><br><span class="line">    a = a.substr(<span class="number">1</span>);</span><br><span class="line">    T-&gt;rchild = Create(a);</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除树 递归free所有结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Det</span><span class="params">(BinTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T) &#123;</span><br><span class="line">        Det(T-&gt;lchild);</span><br><span class="line">        Det(T-&gt;rchild);</span><br><span class="line">        <span class="built_in">free</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="263-树结构相等的判断"><a href="#263-树结构相等的判断" class="headerlink" title="263. 树结构相等的判断"></a>263. 树结构相等的判断</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Check</span><span class="params">(BinTree T1, BinTree T2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T1 &amp;&amp; T2) &#123;          <span class="comment">//列出不等的条件</span></span><br><span class="line">        <span class="keyword">if</span>(T1-&gt;data != T2-&gt;data) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(!Check(T1-&gt;lchild, T2-&gt;lchild)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(!Check(T1-&gt;rchild, T2-&gt;rchild)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> T1 == T2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="264-左右孩子的交换"><a href="#264-左右孩子的交换" class="headerlink" title="264. 左右孩子的交换"></a>264. 左右孩子的交换</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(BinTree T)</span> </span>&#123;      <span class="comment">//递归实现</span></span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    BinTree p = T-&gt;rchild;</span><br><span class="line">    T-&gt;rchild = T-&gt;lchild;</span><br><span class="line">    T-&gt;lchild = p;</span><br><span class="line">    Swap(T-&gt;lchild);</span><br><span class="line">    Swap(T-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="265-amp-269-前中后双序遍历-（递归）"><a href="#265-amp-269-前中后双序遍历-（递归）" class="headerlink" title="265. &amp; 269. 前中后双序遍历 （递归）"></a>265. &amp; 269. 前中后双序遍历 （递归）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实质是控制第几次访问时输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreT</span><span class="params">(BinTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; T-&gt;data;</span><br><span class="line">    PreT(T-&gt;lchild);</span><br><span class="line">    PreT(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InT</span><span class="params">(BinTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    InT(T-&gt;lchild);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; T-&gt;data;</span><br><span class="line">    InT(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PosT</span><span class="params">(BinTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    PosT(T-&gt;lchild);</span><br><span class="line">    PosT(T-&gt;rchild);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; T-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreTTwice</span><span class="params">(BinTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; T-&gt;data;</span><br><span class="line">    PreTTwice(T-&gt;lchild);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; T-&gt;data;</span><br><span class="line">    PreTTwice(T-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="266-最大宽度"><a href="#266-最大宽度" class="headerlink" title="266. 最大宽度"></a>266. 最大宽度</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLevelWidth</span><span class="params">(BinTree T, <span class="keyword">int</span> level)</span> </span>&#123;   <span class="comment">//计算指定层的宽度 递归 </span></span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(level == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> GetLevelWidth(T-&gt;lchild, level - <span class="number">1</span>) + GetLevelWidth(T-&gt;rchild, level - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Width</span><span class="params">(BinTree T)</span> </span>&#123;      <span class="comment">//取最大宽度</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = INT_MIN;</span><br><span class="line">    <span class="keyword">int</span> H = Heigh(T);</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">width</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= H; i++) &#123;</span><br><span class="line">        <span class="built_in">width</span> = GetLevelWidth(T, i);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">width</span> &gt; <span class="built_in">max</span>) <span class="built_in">max</span> = <span class="built_in">width</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="267-amp-271-最长路径-高度"><a href="#267-amp-271-最长路径-高度" class="headerlink" title="267. &amp; 271. 最长路径  高度"></a>267. &amp; 271. 最长路径  高度</h2><p>求最长路径要用到树高</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PathMax</span><span class="params">(BinTree T, <span class="keyword">char</span> path[], <span class="keyword">int</span> len, <span class="keyword">bool</span> &amp;first, <span class="keyword">int</span> <span class="built_in">height</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(T-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; T-&gt;rchild == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(first &amp;&amp; len + <span class="number">1</span> == <span class="built_in">height</span>) &#123;    <span class="comment">//最长路径长度等于二叉树高度 此时顺序输出path内容即为路径</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) <span class="built_in">cout</span> &lt;&lt; path[i];</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; T-&gt;data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            first = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;    <span class="comment">//将走过结点放入path数组 递归寻找最长路径</span></span><br><span class="line">        path[len++] = T-&gt;data;</span><br><span class="line">        PathMax(T-&gt;lchild, path, len, first, <span class="built_in">height</span>);</span><br><span class="line">        PathMax(T-&gt;rchild, path, len, first, <span class="built_in">height</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="268-叶子结点到根节点的路径"><a href="#268-叶子结点到根节点的路径" class="headerlink" title="268. 叶子结点到根节点的路径"></a>268. 叶子结点到根节点的路径</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Path0</span><span class="params">(BinTree T, <span class="keyword">char</span> path[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(T-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; T-&gt;rchild == <span class="literal">NULL</span>) &#123;   <span class="comment">//遇到叶子结点 输出路径</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; T-&gt;data;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = len<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">cout</span> &lt;&lt; path[i];</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;    <span class="comment">//path记录路径</span></span><br><span class="line">        path[len++] = T-&gt;data;</span><br><span class="line">        Path0(T-&gt;lchild, path, len);</span><br><span class="line">        Path0(T-&gt;rchild, path, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="270-统计度为-0-1-2-结点个数"><a href="#270-统计度为-0-1-2-结点个数" class="headerlink" title="270. 统计度为 0 1 2 结点个数"></a>270. 统计度为 0 1 2 结点个数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//控制四种情况的返回值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">D0</span><span class="params">(BinTree T)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(T-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; T-&gt;rchild == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;lchild == <span class="literal">NULL</span>) <span class="keyword">return</span> D0(T-&gt;rchild);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;rchild == <span class="literal">NULL</span>) <span class="keyword">return</span> D0(T-&gt;lchild);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> D0(T-&gt;lchild) + D0(T-&gt;rchild);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">D1</span><span class="params">(BinTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; T-&gt;rchild == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;lchild == <span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">1</span> + D1(T-&gt;rchild);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;rchild == <span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">1</span> + D1(T-&gt;lchild);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> D1(T-&gt;lchild) + D1(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">D2</span><span class="params">(BinTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; T-&gt;rchild == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;lchild == <span class="literal">NULL</span>) <span class="keyword">return</span> D2(T-&gt;rchild);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;rchild == <span class="literal">NULL</span>) <span class="keyword">return</span> D2(T-&gt;lchild);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span> + D2(T-&gt;lchild) + D2(T-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="272-s表达式求值"><a href="#272-s表达式求值" class="headerlink" title="272. s表达式求值"></a>272. s表达式求值</h2><p>我们通常计算的表达式是中缀 比如 2<em>(2+5) = ？ ，计算机喜欢后缀表达式 225+</em> =  ?  ^ _ ^，首先将输入的中缀表达式转成二叉树表示，然后利用后序遍历递归算法计算表达式值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.bjfuacm.com/structure?tag=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&amp;page=1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BJFUOJ | Data Structure&lt;/a&gt;&lt;/p&gt;
&lt;!-- TOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#二叉树结点定义--按给定先序建树以及删除&quot;&gt;二叉树结点定义  按给定先序建树以及删除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#263-树结构相等的判断&quot;&gt;263. 树结构相等的判断&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#264-左右孩子的交换&quot;&gt;264. 左右孩子的交换&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#265--269-前中后双序遍历-递归&quot;&gt;265. &amp;amp; 269. 前中后双序遍历 （递归）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#266-最大宽度&quot;&gt;266. 最大宽度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#267--271-最长路径--高度&quot;&gt;267. &amp;amp; 271. 最长路径  高度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#268-叶子结点到根节点的路径&quot;&gt;268. 叶子结点到根节点的路径&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#270-统计度为-0-1-2-结点个数&quot;&gt;270. 统计度为 0 1 2 结点个数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#272-s表达式求值&quot;&gt;272. s表达式求值&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;

&lt;hr&gt;
&lt;p&gt;复习了树的相关知识 手动建树 欲知此事须躬行！&lt;br&gt;很多方法要求递归实现，在写递归时，要注意边界条件，递归的前进段、返回段。&lt;br&gt;脑中能模拟出递归的流程&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="BJFUOJ" scheme="http://alvin103.github.io/categories/BJFUOJ/"/>
    
    
      <category term="ds" scheme="http://alvin103.github.io/tags/ds/"/>
    
      <category term="二叉树" scheme="http://alvin103.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown</title>
    <link href="http://alvin103.github.io/2020/02/10/MarkDown/"/>
    <id>http://alvin103.github.io/2020/02/10/MarkDown/</id>
    <published>2020-02-09T21:48:48.000Z</published>
    <updated>2020-02-09T21:48:48.468Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hexo + GitHub = Blog!</title>
    <link href="http://alvin103.github.io/2020/02/09/hexo/"/>
    <id>http://alvin103.github.io/2020/02/09/hexo/</id>
    <published>2020-02-09T13:44:18.000Z</published>
    <updated>2020-02-10T17:52:56.503Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/02/09/hexo/1.jpg" alt="1"><br>&emsp;&emsp;考研前就想过搭建属于自己的空间，之前一直使用 印象笔记 这类应用记录。而自己购买域名服务器搭建博客需要一定开销^_^，某天刷b站时了解到可以使用github page构建属于自己的小站点。<br>&emsp;&emsp;于是，在一个安静的下午，决定完成它。<br>&emsp;&emsp;使用了Hexo静态博客框架，将生成的静态网页托管在GitHub上。就愉快地走进了Blog的大门！</p><p>目录：</p><!-- TOC --><ul><li><a href="#%e5%87%86%e5%a4%87%e5%b7%a5%e4%bd%9c">准备工作</a><ul><li><a href="#%e5%ae%89%e8%a3%85git">安装Git</a></li><li><a href="#%e5%ae%89%e8%a3%85nodejs">安装Node.js</a></li></ul></li><li><a href="#hexo">Hexo</a><ul><li><a href="#"></a></li><li><a href="#%e5%88%9d%e5%a7%8b%e5%8c%96hexo">初始化Hexo:</a></li><li><a href="#%e6%9c%ac%e5%9c%b0%e5%8d%9a%e5%ae%a2">本地博客</a></li><li><a href="#%e6%96%b0%e5%bb%ba%e6%96%87%e7%ab%a0">新建文章</a></li></ul></li><li><a href="#%e9%83%a8%e7%bd%b2%e5%88%b0github">部署到Github</a><ul><li><a href="#new%e4%b8%80%e4%b8%aa%e4%bb%93%e5%ba%93">new一个仓库</a></li><li><a href="#%e5%ae%89%e8%a3%85git%e9%83%a8%e7%bd%b2%e6%8f%92%e4%bb%b6">安装git部署插件</a></li><li><a href="#%e9%85%8d%e7%bd%ae">配置</a></li><li><a href="#%e9%83%a8%e7%bd%b2">部署</a></li></ul></li><li><a href="#end">END</a></li></ul><!-- /TOC --><a id="more"></a><hr><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p> <a href="https://gitforwindows.org/" target="_blank" rel="noopener">下载地址</a>  </p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p> <a href="https://nodejs.org/en/" target="_blank" rel="noopener">下载地址</a></p><hr><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id><a href="#" class="headerlink" title></a></h3><p>桌面右键选择 Git Bash Here，输入命令</p><pre><code>npm install -g hexo</code></pre><h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo:"></a>初始化Hexo:</h3><p>在刚才生成的blog文件夹下 右键Git Bush Here，输入命令</p><pre><code>hexo init</code></pre><p><img src="/2020/02/09/hexo/2.jpg" alt="1"></p><h3 id="本地博客"><a href="#本地博客" class="headerlink" title="本地博客"></a>本地博客</h3><p>输入如下命令:</p><pre><code>hexo s</code></pre><p>在浏览器输入     localhost:4000  就可以访问啦</p><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><pre><code>hexo n &quot;我的第一篇blog&quot;</code></pre><hr><h2 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h2><p>刚才只是在本地生成了静态博客，接下来要发布网站，也就是将Hexo部署到Github上。</p><h3 id="new一个仓库"><a href="#new一个仓库" class="headerlink" title="new一个仓库"></a>new一个仓库</h3><p><img src="/2020/02/09/hexo/3.jpg" alt="1"></p><h3 id="安装git部署插件"><a href="#安装git部署插件" class="headerlink" title="安装git部署插件"></a>安装git部署插件</h3><p>blog下输入命令</p><pre><code>npm install --save hexo-deployer-git</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>编辑blog文件夹里的 _config.yml 文件:<br>添加 repo: 仓库地址<br>&emsp;&emsp; branch: master<br><img src="/2020/02/09/hexo/4.jpg" alt="1"><br>还可以顺便设置一下名字什么的<br><img src="/2020/02/09/hexo/2.jpg" alt="1"></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><pre><code>hexo d</code></pre><p>这时第一次会要求输入github账号密码，部署后就可以通过 alvin103.github.io 访问博客了！写了新文章可以先在本地调试好之后发布</p><p>以后发布文章输入这两个命令就ok</p><pre><code>hexo cleanhexo d -g </code></pre><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>更换了Hexo主题next ^_^  后面有时间想自己做一个Theme  </p><p>在写文章时也遇到一些问题，比如添加图片、编码格式等等都可以通过搜索获得帮助。  </p><p>写到这里，就是总结一些经验.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/02/09/hexo/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;br&gt;&amp;emsp;&amp;emsp;考研前就想过搭建属于自己的空间，之前一直使用 印象笔记 这类应用记录。而自己购买域名服务器搭建博客需要一定开销^_^，某天刷b站时了解到可以使用github page构建属于自己的小站点。&lt;br&gt;&amp;emsp;&amp;emsp;于是，在一个安静的下午，决定完成它。&lt;br&gt;&amp;emsp;&amp;emsp;使用了Hexo静态博客框架，将生成的静态网页托管在GitHub上。就愉快地走进了Blog的大门！&lt;/p&gt;
&lt;p&gt;目录：&lt;/p&gt;
&lt;!-- TOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e5%87%86%e5%a4%87%e5%b7%a5%e4%bd%9c&quot;&gt;准备工作&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e5%ae%89%e8%a3%85git&quot;&gt;安装Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e5%ae%89%e8%a3%85nodejs&quot;&gt;安装Node.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#hexo&quot;&gt;Hexo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e5%88%9d%e5%a7%8b%e5%8c%96hexo&quot;&gt;初始化Hexo:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%9c%ac%e5%9c%b0%e5%8d%9a%e5%ae%a2&quot;&gt;本地博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%96%b0%e5%bb%ba%e6%96%87%e7%ab%a0&quot;&gt;新建文章&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e9%83%a8%e7%bd%b2%e5%88%b0github&quot;&gt;部署到Github&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#new%e4%b8%80%e4%b8%aa%e4%bb%93%e5%ba%93&quot;&gt;new一个仓库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e5%ae%89%e8%a3%85git%e9%83%a8%e7%bd%b2%e6%8f%92%e4%bb%b6&quot;&gt;安装git部署插件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e9%85%8d%e7%bd%ae&quot;&gt;配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e9%83%a8%e7%bd%b2&quot;&gt;部署&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#end&quot;&gt;END&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
    
      <category term="博客搭建" scheme="http://alvin103.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="blog" scheme="http://alvin103.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://alvin103.github.io/2020/02/09/Hello%20World/"/>
    <id>http://alvin103.github.io/2020/02/09/Hello%20World/</id>
    <published>2020-02-09T11:44:18.000Z</published>
    <updated>2020-02-10T17:18:47.406Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#2020">2020</a></li><li><a href="#end">END</a></li></ul><!-- /TOC --><h2 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h2><p>Zzh 的 Blog 就这样开始了</p><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- TOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#2020&quot;&gt;2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#end&quot;&gt;END&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;

&lt;h2 id=&quot;2020&quot;&gt;&lt;a href=&quot;#2020&quot; clas
      
    
    </summary>
    
    
      <category term="none" scheme="http://alvin103.github.io/categories/none/"/>
    
    
  </entry>
  
</feed>
